{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9","program":"C:\\Users\\Shogg\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rand","--edition=2018","C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"libc\"","--cfg","feature=\"rand_chacha\"","--cfg","feature=\"rand_hc\"","--cfg","feature=\"std\"","--cfg","feature=\"std_rng\"","-C","metadata=aa1a0e8692c6d40c","-C","extra-filename=-aa1a0e8692c6d40c","--out-dir","d:\\Repositories\\MIDIGenerator\\midi_generator\\target\\rls\\debug\\deps","-L","dependency=d:\\Repositories\\MIDIGenerator\\midi_generator\\target\\rls\\debug\\deps","--extern","rand_chacha=d:\\Repositories\\MIDIGenerator\\midi_generator\\target\\rls\\debug\\deps\\librand_chacha-cb37f8445df7ae0f.rmeta","--extern","rand_core=d:\\Repositories\\MIDIGenerator\\midi_generator\\target\\rls\\debug\\deps\\librand_core-13468bc8754107b1.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Shogg\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\Repositories\\MIDIGenerator\\midi_generator\\target\\rls\\debug\\deps\\librand-aa1a0e8692c6d40c.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[11129419005894960339,3374731118936246935]},"crate_root":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src","external_crates":[{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2953284957370121905,516218847044108999]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","num":2,"id":{"name":"core","disambiguator":[4886921161452974022,9452701908620647308]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3203561457090851205,4632072058037203867]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3169376498131592849,9803978538207206865]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9199649512872691809,295485750221223515]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8443236399884245798,5222098755004489868]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6875631416372754603,10839808870381595949]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1502820548942319655,12324332090615114041]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[430706850608609257,9838809896428719127]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14503357713055743246,17731918345561731946]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[5693586899772496405,17220236988479499600]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1060170945230123807,4750192540160149325]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[5837979218880944404,14867613958503134191]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":14,"id":{"name":"rand_core","disambiguator":[14128321427540244859,16590653471054952482]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":15,"id":{"name":"getrandom","disambiguator":[5224389747023823707,6578214829218979629]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[10643051297448615467,16998885562627461641]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","num":17,"id":{"name":"rand_chacha","disambiguator":[17115215441985869360,11552597975181978327]}},{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","num":18,"id":{"name":"ppv_lite86","disambiguator":[5858542418927792010,9659315003629290847]}}],"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":408,"byte_end":5226,"line_start":10,"line_end":185,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":14,"index":143},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2819,"byte_end":2828,"line_start":93,"line_end":93,"column_start":21,"column_end":30},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":72},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2830,"byte_end":2835,"line_start":93,"line_end":93,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":138},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2837,"byte_end":2844,"line_start":93,"line_end":93,"column_start":39,"column_end":46},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":144},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2846,"byte_end":2857,"line_start":93,"line_end":93,"column_start":48,"column_end":59},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9676,"byte_end":9685,"line_start":99,"line_end":99,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9687,"byte_end":9701,"line_start":99,"line_end":99,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9726,"byte_end":9732,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":1007},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9734,"byte_end":9746,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9770,"byte_end":9782,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9822,"byte_end":9829,"line_start":102,"line_end":102,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9889,"byte_end":9902,"line_start":105,"line_end":105,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9904,"byte_end":9917,"line_start":105,"line_end":105,"column_start":47,"column_end":60},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":78565,"byte_end":78578,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":113}},{"kind":"Use","ref_id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":78580,"byte_end":78593,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":113}},{"kind":"Use","ref_id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10226,"byte_end":10235,"line_start":117,"line_end":117,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139069,"byte_end":139081,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139229,"byte_end":139235,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139326,"byte_end":139335,"line_start":29,"line_end":29,"column_start":22,"column_end":31},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139376,"byte_end":139390,"line_start":30,"line_end":30,"column_start":40,"column_end":54},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139392,"byte_end":139403,"line_start":30,"line_end":30,"column_start":56,"column_end":67},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139490,"byte_end":139496,"line_start":33,"line_end":33,"column_start":17,"column_end":23},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139498,"byte_end":139508,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":14,"index":143},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139545,"byte_end":139554,"line_start":34,"line_end":34,"column_start":35,"column_end":44},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139556,"byte_end":139559,"line_start":34,"line_end":34,"column_start":46,"column_end":49},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":14,"index":138},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139561,"byte_end":139568,"line_start":34,"line_end":34,"column_start":51,"column_end":58},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":14,"index":144},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139570,"byte_end":139581,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":1753},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":163443,"byte_end":163452,"line_start":14,"line_end":14,"column_start":46,"column_end":55},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":352}},{"kind":"Use","ref_id":{"krate":0,"index":1747},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":163454,"byte_end":163461,"line_start":14,"line_end":14,"column_start":57,"column_end":64},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":352}},{"kind":"Use","ref_id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":163489,"byte_end":163501,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":352}},{"kind":"Use","ref_id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162805,"byte_end":162811,"line_start":108,"line_end":108,"column_start":48,"column_end":54},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":351}},{"kind":"Use","ref_id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162885,"byte_end":162894,"line_start":109,"line_end":109,"column_start":73,"column_end":82},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":351}},{"kind":"Use","ref_id":{"krate":14,"index":198},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162946,"byte_end":162951,"line_start":111,"line_end":111,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":351}},{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3053,"byte_end":3063,"line_start":104,"line_end":104,"column_start":30,"column_end":40},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3079,"byte_end":3083,"line_start":105,"line_end":105,"column_start":15,"column_end":19},"alias_span":null,"name":"Fill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3085,"byte_end":3088,"line_start":105,"line_end":105,"column_start":21,"column_end":24},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":408,"byte_end":5226,"line_start":10,"line_end":185,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":289},{"krate":0,"index":304},{"krate":0,"index":351},{"krate":0,"index":489},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":649}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"! Utilities for random number generation","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"! useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Quick Start","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"! a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"! [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"! the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! functionality on top of RNGs.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! if rand::random() { // generates a boolean","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"!     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"!     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"! }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"! let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"! nums.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! # The Book","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! For the user guide and further documentation, please read","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1394,"byte_end":1455,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"! [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1456,"byte_end":1517,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1733,"byte_end":1755,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1756,"byte_end":1795,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"allow(clippy :: excessive_precision, clippy :: unreadable_literal, clippy ::\n        float_cmp)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1983,"byte_end":2082,"line_start":53,"line_end":57,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":44},{"krate":0,"index":113},{"krate":0,"index":125},{"krate":0,"index":151},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":196},{"krate":0,"index":229},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":1450},{"krate":0,"index":1457},{"krate":0,"index":278},{"krate":0,"index":285},{"krate":0,"index":1462},{"krate":0,"index":1467},{"krate":0,"index":1466},{"krate":0,"index":1464}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"! Generating random samples from probability distributions","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5636,"byte_end":5696,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5697,"byte_end":5700,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5701,"byte_end":5777,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"! implementations. It is the workhorse behind some of the convenient","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5778,"byte_end":5848,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"! functionality of the [`Rng`] trait, e.g. [`Rng::gen`], [`Rng::gen_range`] and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5849,"byte_end":5930,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"! of course [`Rng::sample`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5931,"byte_end":5961,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5962,"byte_end":5965,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5966,"byte_end":6039,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"! occurrence of each value in its sample space.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6040,"byte_end":6089,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6090,"byte_end":6093,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6094,"byte_end":6172,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"! algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6173,"byte_end":6246,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"! according to the distribution `X` represents, using an external source of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6247,"byte_end":6324,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"! randomness (an RNG supplied to the `sample` function).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6325,"byte_end":6383,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6384,"byte_end":6387,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6388,"byte_end":6458,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"! Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6459,"byte_end":6532,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"! but it may have internal parameters set at construction time (for example,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6533,"byte_end":6611,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"! [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6612,"byte_end":6692,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6693,"byte_end":6696,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6697,"byte_end":6700,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! # The `Standard` distribution","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6701,"byte_end":6734,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6735,"byte_end":6738,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6739,"byte_end":6809,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"! distribution used by [`Rng::gen`] and represents the \"default\" way to","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6810,"byte_end":6883,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"! produce a random value for many different types, including most primitive","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6884,"byte_end":6961,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"! types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6962,"byte_end":7038,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"! [`Standard`] for more details.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7039,"byte_end":7073,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7074,"byte_end":7077,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7078,"byte_end":7157,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"! possible to generate type `T` with [`Rng::gen`], and by extension also","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7158,"byte_end":7232,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"! with the [`random`] function.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7233,"byte_end":7266,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7267,"byte_end":7270,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! ## Random characters","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7271,"byte_end":7295,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7296,"byte_end":7299,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7300,"byte_end":7374,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"! numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7375,"byte_end":7452,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"! `char`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7453,"byte_end":7464,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7465,"byte_end":7468,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7469,"byte_end":7472,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! # Uniform numeric ranges","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7473,"byte_end":7501,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7502,"byte_end":7505,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7506,"byte_end":7583,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"! more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7584,"byte_end":7659,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"! space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7660,"byte_end":7735,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"! Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7736,"byte_end":7814,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7815,"byte_end":7818,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! Values may be sampled from this distribution using [`Rng::gen_range`] or","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7819,"byte_end":7895,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"! by creating a distribution object with [`Uniform::new`],","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7896,"byte_end":7956,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"! [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7957,"byte_end":8035,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"! known at compile time it is typically faster to reuse an existing","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8036,"byte_end":8105,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"! distribution object than to call [`Rng::gen_range`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8106,"byte_end":8162,"line_start":61,"line_end":61,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8163,"byte_end":8166,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8167,"byte_end":8239,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"! although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8240,"byte_end":8312,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"! documentation in the [`uniform`] module. Doing so enables generation of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8313,"byte_end":8388,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"! values of type `T` with  [`Rng::gen_range`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8389,"byte_end":8437,"line_start":66,"line_end":66,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8438,"byte_end":8441,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! ## Open and half-open ranges","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8442,"byte_end":8474,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8475,"byte_end":8478,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8479,"byte_end":8554,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"! range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8555,"byte_end":8631,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"! and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8632,"byte_end":8713,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"! [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8714,"byte_end":8797,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"! [`Standard`] documentation for more details.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8798,"byte_end":8846,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8847,"byte_end":8850,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! # Non-uniform sampling","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8851,"byte_end":8877,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8878,"byte_end":8881,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8882,"byte_end":8959,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"! the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8960,"byte_end":9031,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9032,"byte_end":9035,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9036,"byte_end":9105,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"! [`weighted`] module.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9106,"byte_end":9130,"line_start":82,"line_end":82,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9131,"byte_end":9134,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9135,"byte_end":9209,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"! it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9210,"byte_end":9281,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9282,"byte_end":9285,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9286,"byte_end":9289,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9290,"byte_end":9376,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"! [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9377,"byte_end":9432,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"! [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9433,"byte_end":9480,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"! [`random`]: crate::random","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9482,"byte_end":9511,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"! [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9512,"byte_end":9567,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"! [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9568,"byte_end":9615,"line_start":94,"line_end":94,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19552,"byte_end":19561,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":652}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":18974,"byte_end":19005,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19006,"byte_end":19009,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19010,"byte_end":19080,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19081,"byte_end":19084,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19085,"byte_end":19098,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19099,"byte_end":19102,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19103,"byte_end":19114,"line_start":21,"line_end":21,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19115,"byte_end":19170,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19171,"byte_end":19174,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19175,"byte_end":19216,"line_start":24,"line_end":24,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19217,"byte_end":19263,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19264,"byte_end":19319,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19320,"byte_end":19327,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19328,"byte_end":19331,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19332,"byte_end":19347,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19348,"byte_end":19351,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19352,"byte_end":19422,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19423,"byte_end":19493,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19494,"byte_end":19510,"line_start":33,"line_end":33,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21026,"byte_end":21044,"line_start":69,"line_end":69,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":20998,"byte_end":21021,"line_start":68,"line_end":68,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":20977,"byte_end":20991,"line_start":67,"line_end":67,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"BernoulliError::{InvalidProbability}","parent":null,"children":[{"krate":0,"index":659}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":20876,"byte_end":20922,"line_start":65,"line_end":65,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21915,"byte_end":21918,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"fn (p: f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21396,"byte_end":21470,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21475,"byte_end":21478,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21483,"byte_end":21498,"line_start":86,"line_end":86,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21503,"byte_end":21506,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21511,"byte_end":21583,"line_start":88,"line_end":88,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21588,"byte_end":21661,"line_start":89,"line_end":89,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21666,"byte_end":21669,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21674,"byte_end":21750,"line_start":91,"line_end":91,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21755,"byte_end":21821,"line_start":92,"line_end":92,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21826,"byte_end":21889,"line_start":93,"line_end":93,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21894,"byte_end":21903,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22799,"byte_end":22809,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"fn (numerator: u32, denominator: u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22257,"byte_end":22323,"line_start":107,"line_end":107,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22328,"byte_end":22396,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22401,"byte_end":22475,"line_start":109,"line_end":109,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22480,"byte_end":22483,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22488,"byte_end":22557,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ For `numerator > denominator` and `denominator == 0`, this returns an","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22562,"byte_end":22635,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/ error. Otherwise, for `numerator == denominator`, samples are always","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22640,"byte_end":22712,"line_start":113,"line_end":113,"column_start":5,"column_end":77}},{"value":"/ true; for `numerator == 0` samples are always false.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22717,"byte_end":22773,"line_start":114,"line_end":114,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22778,"byte_end":22787,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":672},{"krate":0,"index":681},{"krate":0,"index":679},{"krate":0,"index":676},{"krate":0,"index":54},{"krate":0,"index":62},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":684},{"krate":0,"index":694},{"krate":0,"index":692},{"krate":0,"index":689},{"krate":0,"index":98},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":713},{"krate":0,"index":715},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":809},{"krate":0,"index":811},{"krate":0,"index":825},{"krate":0,"index":827},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":873},{"krate":0,"index":875},{"krate":0,"index":889},{"krate":0,"index":898},{"krate":0,"index":896},{"krate":0,"index":893},{"krate":0,"index":99},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":933},{"krate":0,"index":939},{"krate":0,"index":938},{"krate":0,"index":936},{"krate":0,"index":941},{"krate":0,"index":954},{"krate":0,"index":953},{"krate":0,"index":951},{"krate":0,"index":100},{"krate":0,"index":102}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"! A distribution uniformly sampling numbers within a given range.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":25786,"byte_end":25853,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":25854,"byte_end":25857,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":25858,"byte_end":25936,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"! e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":25937,"byte_end":26016,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26017,"byte_end":26084,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"! [`Uniform`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26085,"byte_end":26101,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26102,"byte_end":26105,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! This distribution is provided with support for several primitive types","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26106,"byte_end":26180,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"! (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26181,"byte_end":26259,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"! and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26260,"byte_end":26339,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"! implementation.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26340,"byte_end":26359,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26360,"byte_end":26363,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26364,"byte_end":26442,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"! back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26443,"byte_end":26518,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"! ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26519,"byte_end":26598,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"! need to be used directly (unless implementing a derived back-end).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26599,"byte_end":26669,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26670,"byte_end":26673,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Example usage","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26674,"byte_end":26693,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26694,"byte_end":26697,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26698,"byte_end":26705,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"! use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26706,"byte_end":26738,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"! use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26739,"byte_end":26776,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26777,"byte_end":26780,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26781,"byte_end":26812,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"! let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26813,"byte_end":26854,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26855,"byte_end":26858,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! // sample between 1 and 10 points","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26859,"byte_end":26896,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"! for _ in 0..rng.gen_range(1, 11) {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26897,"byte_end":26935,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"!     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26936,"byte_end":27015,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"!     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27016,"byte_end":27074,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"!     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27075,"byte_end":27115,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"! }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27116,"byte_end":27121,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27122,"byte_end":27129,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27130,"byte_end":27133,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! # Extending `Uniform` to support a custom type","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27134,"byte_end":27184,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27185,"byte_end":27188,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27189,"byte_end":27264,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"! implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27265,"byte_end":27346,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"! helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27347,"byte_end":27423,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27424,"byte_end":27427,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27428,"byte_end":27508,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"! (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27509,"byte_end":27587,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"! Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27588,"byte_end":27664,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"! `low < high`). The example below merely wraps another back-end.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27665,"byte_end":27732,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27733,"byte_end":27736,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27737,"byte_end":27814,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"! type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27815,"byte_end":27893,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"! by value. In the implementation of these functions, you can choose to","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27894,"byte_end":27967,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"! simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27968,"byte_end":28052,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"! to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28053,"byte_end":28123,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28124,"byte_end":28127,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28128,"byte_end":28135,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28136,"byte_end":28161,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"! use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28162,"byte_end":28224,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"!         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28225,"byte_end":28281,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28282,"byte_end":28285,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"! struct MyF32(f32);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28286,"byte_end":28308,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28309,"byte_end":28312,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! #[derive(Clone, Copy, Debug)]","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28313,"byte_end":28346,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"! struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28347,"byte_end":28390,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28391,"byte_end":28394,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! impl UniformSampler for UniformMyF32 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28395,"byte_end":28437,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"!     type X = MyF32;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28438,"byte_end":28461,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"!     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28462,"byte_end":28511,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"!         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28512,"byte_end":28564,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"!               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28565,"byte_end":28616,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"!     {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28617,"byte_end":28626,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"!         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28627,"byte_end":28710,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"!     }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28711,"byte_end":28720,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"!     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28721,"byte_end":28780,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"!         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28781,"byte_end":28833,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"!               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28834,"byte_end":28885,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"!     {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28886,"byte_end":28895,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"!         UniformSampler::new(low, high)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28896,"byte_end":28938,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"!     }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28939,"byte_end":28948,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"!     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28949,"byte_end":29016,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"!         MyF32(self.0.sample(rng))","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29017,"byte_end":29054,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"!     }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29055,"byte_end":29064,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29065,"byte_end":29070,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29071,"byte_end":29074,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! impl SampleUniform for MyF32 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29075,"byte_end":29109,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"!     type Sampler = UniformMyF32;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29110,"byte_end":29146,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"! }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29147,"byte_end":29152,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29153,"byte_end":29156,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29157,"byte_end":29212,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"! let uniform = Uniform::new(low, high);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29213,"byte_end":29255,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"! let x = uniform.sample(&mut thread_rng());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29256,"byte_end":29302,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"! ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29303,"byte_end":29310,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29311,"byte_end":29314,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29315,"byte_end":29382,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"! [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29383,"byte_end":29452,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"! [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29453,"byte_end":29514,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"! [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29515,"byte_end":29580,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"! [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29581,"byte_end":29652,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"! [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29653,"byte_end":29734,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31884,"byte_end":31891,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30237,"byte_end":30284,"line_start":121,"line_end":121,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30285,"byte_end":30288,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30289,"byte_end":30360,"line_start":123,"line_end":123,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30361,"byte_end":30437,"line_start":124,"line_end":124,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30438,"byte_end":30499,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30500,"byte_end":30503,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30504,"byte_end":30576,"line_start":127,"line_end":127,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30577,"byte_end":30655,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30656,"byte_end":30734,"line_start":129,"line_end":129,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30735,"byte_end":30767,"line_start":130,"line_end":130,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30768,"byte_end":30771,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30772,"byte_end":30837,"line_start":132,"line_end":132,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30838,"byte_end":30917,"line_start":133,"line_end":133,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30918,"byte_end":30997,"line_start":134,"line_end":134,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30998,"byte_end":31077,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31078,"byte_end":31155,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31156,"byte_end":31200,"line_start":137,"line_end":137,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31201,"byte_end":31204,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31205,"byte_end":31263,"line_start":139,"line_end":139,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular care must","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31264,"byte_end":31342,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31343,"byte_end":31422,"line_start":141,"line_end":141,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31423,"byte_end":31426,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31427,"byte_end":31440,"line_start":143,"line_end":143,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31441,"byte_end":31444,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31445,"byte_end":31452,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31453,"byte_end":31506,"line_start":146,"line_end":146,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31507,"byte_end":31510,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31511,"byte_end":31526,"line_start":148,"line_end":148,"column_start":1,"column_end":16}},{"value":"/     let between = Uniform::from(10..10000);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31527,"byte_end":31574,"line_start":149,"line_end":149,"column_start":1,"column_end":48}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31575,"byte_end":31616,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"/     let mut sum = 0;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31617,"byte_end":31641,"line_start":151,"line_end":151,"column_start":1,"column_end":25}},{"value":"/     for _ in 0..1000 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31642,"byte_end":31668,"line_start":152,"line_end":152,"column_start":1,"column_end":27}},{"value":"/         sum += between.sample(&mut rng);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31669,"byte_end":31713,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/     }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31714,"byte_end":31723,"line_start":154,"line_end":154,"column_start":1,"column_end":10}},{"value":"/     println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31724,"byte_end":31752,"line_start":155,"line_end":155,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31753,"byte_end":31758,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31759,"byte_end":31766,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31767,"byte_end":31770,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31771,"byte_end":31796,"line_start":159,"line_end":159,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31797,"byte_end":31842,"line_start":160,"line_end":160,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32127,"byte_end":32130,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31964,"byte_end":32037,"line_start":165,"line_end":165,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32042,"byte_end":32115,"line_start":166,"line_end":166,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32469,"byte_end":32482,"line_start":177,"line_end":177,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32317,"byte_end":32392,"line_start":175,"line_end":175,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32397,"byte_end":32457,"line_start":176,"line_end":176,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33128,"byte_end":33141,"line_start":199,"line_end":199,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":67}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32827,"byte_end":32900,"line_start":192,"line_end":192,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32901,"byte_end":32946,"line_start":193,"line_end":193,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32947,"byte_end":32950,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32951,"byte_end":33023,"line_start":195,"line_end":195,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33024,"byte_end":33055,"line_start":196,"line_end":196,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33056,"byte_end":33059,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33060,"byte_end":33117,"line_start":198,"line_end":198,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33225,"byte_end":33232,"line_start":201,"line_end":201,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33155,"byte_end":33215,"line_start":200,"line_end":200,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33707,"byte_end":33721,"line_start":214,"line_end":214,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":78}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33263,"byte_end":33313,"line_start":204,"line_end":204,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33314,"byte_end":33317,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33318,"byte_end":33390,"line_start":206,"line_end":206,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33391,"byte_end":33422,"line_start":207,"line_end":207,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33423,"byte_end":33426,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33427,"byte_end":33503,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33504,"byte_end":33581,"line_start":210,"line_end":210,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33582,"byte_end":33585,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33586,"byte_end":33643,"line_start":212,"line_end":212,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33644,"byte_end":33696,"line_start":213,"line_end":213,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33789,"byte_end":33790,"line_start":216,"line_end":216,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33735,"byte_end":33779,"line_start":215,"line_end":215,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34053,"byte_end":34056,"line_start":223,"line_end":223,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33797,"byte_end":33869,"line_start":218,"line_end":218,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33874,"byte_end":33892,"line_start":219,"line_end":219,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33897,"byte_end":33900,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33905,"byte_end":33968,"line_start":221,"line_end":221,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33973,"byte_end":34045,"line_start":222,"line_end":222,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34429,"byte_end":34442,"line_start":233,"line_end":233,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34193,"byte_end":34249,"line_start":228,"line_end":228,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34254,"byte_end":34257,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34262,"byte_end":34325,"line_start":230,"line_end":230,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34330,"byte_end":34399,"line_start":231,"line_end":231,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34404,"byte_end":34421,"line_start":232,"line_end":232,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34606,"byte_end":34612,"line_start":239,"line_end":239,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"fn <R> (&self, rng: &mut R) -> Self::X","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34579,"byte_end":34598,"line_start":238,"line_end":238,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35587,"byte_end":35600,"line_start":260,"line_end":260,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"fn <R, B1, B2> (low: B1, high: B2, rng: &mut R) -> Self::X","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34667,"byte_end":34742,"line_start":241,"line_end":241,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34747,"byte_end":34791,"line_start":242,"line_end":242,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34796,"byte_end":34799,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34804,"byte_end":34844,"line_start":244,"line_end":244,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34849,"byte_end":34922,"line_start":245,"line_end":245,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34927,"byte_end":35001,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35006,"byte_end":35061,"line_start":247,"line_end":247,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35066,"byte_end":35099,"line_start":248,"line_end":248,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35104,"byte_end":35107,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35112,"byte_end":35187,"line_start":250,"line_end":250,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35192,"byte_end":35246,"line_start":251,"line_end":251,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35251,"byte_end":35258,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35263,"byte_end":35347,"line_start":253,"line_end":253,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35352,"byte_end":35374,"line_start":254,"line_end":254,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35379,"byte_end":35442,"line_start":255,"line_end":255,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35447,"byte_end":35482,"line_start":256,"line_end":256,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35487,"byte_end":35557,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35562,"byte_end":35567,"line_start":258,"line_end":258,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35572,"byte_end":35579,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36442,"byte_end":36454,"line_start":287,"line_end":287,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":90}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36236,"byte_end":36290,"line_start":282,"line_end":282,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36291,"byte_end":36352,"line_start":283,"line_end":283,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36353,"byte_end":36391,"line_start":284,"line_end":284,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36392,"byte_end":36395,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36396,"byte_end":36431,"line_start":286,"line_end":286,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36608,"byte_end":36614,"line_start":291,"line_end":291,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36471,"byte_end":36536,"line_start":288,"line_end":288,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36541,"byte_end":36544,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36549,"byte_end":36600,"line_start":290,"line_end":290,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39036,"byte_end":39046,"line_start":350,"line_end":350,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37091,"byte_end":37158,"line_start":315,"line_end":315,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37159,"byte_end":37162,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37163,"byte_end":37242,"line_start":317,"line_end":317,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37243,"byte_end":37300,"line_start":318,"line_end":318,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37301,"byte_end":37304,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37305,"byte_end":37331,"line_start":320,"line_end":320,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37332,"byte_end":37335,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37336,"byte_end":37410,"line_start":322,"line_end":322,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37411,"byte_end":37491,"line_start":323,"line_end":323,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37492,"byte_end":37572,"line_start":324,"line_end":324,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37573,"byte_end":37576,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37577,"byte_end":37653,"line_start":326,"line_end":326,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37654,"byte_end":37732,"line_start":327,"line_end":327,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37733,"byte_end":37809,"line_start":328,"line_end":328,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37810,"byte_end":37863,"line_start":329,"line_end":329,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37864,"byte_end":37867,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37868,"byte_end":37944,"line_start":331,"line_end":331,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37945,"byte_end":38008,"line_start":332,"line_end":332,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38009,"byte_end":38012,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38013,"byte_end":38087,"line_start":334,"line_end":334,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38088,"byte_end":38168,"line_start":335,"line_end":335,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38169,"byte_end":38255,"line_start":336,"line_end":336,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38256,"byte_end":38333,"line_start":337,"line_end":337,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38334,"byte_end":38405,"line_start":338,"line_end":338,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38406,"byte_end":38409,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38410,"byte_end":38488,"line_start":340,"line_end":340,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38489,"byte_end":38566,"line_start":341,"line_end":341,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38567,"byte_end":38646,"line_start":342,"line_end":342,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38647,"byte_end":38721,"line_start":343,"line_end":343,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38722,"byte_end":38769,"line_start":344,"line_end":344,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38770,"byte_end":38773,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38774,"byte_end":38850,"line_start":346,"line_end":346,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38851,"byte_end":38930,"line_start":347,"line_end":347,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38931,"byte_end":38994,"line_start":348,"line_end":348,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50928,"byte_end":50940,"line_start":647,"line_end":647,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50002,"byte_end":50076,"line_start":627,"line_end":627,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50077,"byte_end":50080,"line_start":628,"line_end":628,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50081,"byte_end":50160,"line_start":629,"line_end":629,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50161,"byte_end":50218,"line_start":630,"line_end":630,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50219,"byte_end":50222,"line_start":631,"line_end":631,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50223,"byte_end":50249,"line_start":632,"line_end":632,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50250,"byte_end":50253,"line_start":633,"line_end":633,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50254,"byte_end":50333,"line_start":634,"line_end":634,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50334,"byte_end":50411,"line_start":635,"line_end":635,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50412,"byte_end":50458,"line_start":636,"line_end":636,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50459,"byte_end":50462,"line_start":637,"line_end":637,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50463,"byte_end":50541,"line_start":638,"line_end":638,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50542,"byte_end":50614,"line_start":639,"line_end":639,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 23 bits of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50615,"byte_end":50694,"line_start":640,"line_end":640,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50695,"byte_end":50747,"line_start":641,"line_end":641,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50748,"byte_end":50751,"line_start":642,"line_end":642,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50752,"byte_end":50784,"line_start":643,"line_end":643,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50785,"byte_end":50837,"line_start":644,"line_end":644,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50838,"byte_end":50886,"line_start":645,"line_end":645,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":933},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59004,"byte_end":59019,"line_start":840,"line_end":840,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":58755,"byte_end":58819,"line_start":835,"line_end":835,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":58820,"byte_end":58823,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":58824,"byte_end":58904,"line_start":837,"line_end":837,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":58905,"byte_end":58962,"line_start":838,"line_end":838,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":117}],"decl_id":null,"docs":" Weighted index sampling","sig":null,"attributes":[{"value":"deprecated(since = \"0.8.0\", note =\n             \"use rand::distributions::{WeightedIndex, WeightedError} instead\")","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9954,"byte_end":10058,"line_start":110,"line_end":110,"column_start":1,"column_end":105}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10059,"byte_end":10084,"line_start":111,"line_end":111,"column_start":1,"column_end":26}},{"value":"! Weighted index sampling","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":78384,"byte_end":78411,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":78412,"byte_end":78415,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This module is deprecated. Use [`crate::distributions::WeightedIndex`] and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":78416,"byte_end":78494,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"! [`crate::distributions::WeightedError`] instead.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":78495,"byte_end":78547,"line_start":12,"line_end":12,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":78695,"byte_end":78707,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":78597,"byte_end":78619,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"deprecated(since = \"0.8.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":78620,"byte_end":78686,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":956},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":79012,"byte_end":79025,"line_start":26,"line_end":26,"column_start":16,"column_end":29},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":958}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":79133,"byte_end":79136,"line_start":30,"line_end":30,"column_start":16,"column_end":19},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"fn (_weights: Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":79258,"byte_end":79264,"line_start":35,"line_end":35,"column_start":15,"column_end":21},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82860,"byte_end":82873,"line_start":76,"line_end":76,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted_index::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980}],"decl_id":null,"docs":" A distribution using weighted sampling of discrete items","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling of discrete items","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80346,"byte_end":80406,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80407,"byte_end":80410,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Sampling a `WeightedIndex` distribution returns the index of a randomly","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80411,"byte_end":80486,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ selected element from the iterator used when the `WeightedIndex` was","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80487,"byte_end":80559,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/ created. The chance of a given element being picked is proportional to the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80560,"byte_end":80638,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ value of the element. The weights can use any type `X` for which an","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80639,"byte_end":80710,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80711,"byte_end":80755,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80756,"byte_end":80759,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80760,"byte_end":80777,"line_start":28,"line_end":28,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80778,"byte_end":80781,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Time complexity of sampling from `WeightedIndex` is `O(log N)` where","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80782,"byte_end":80854,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ `N` is the number of weights. As an alternative,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80855,"byte_end":80907,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/ [`rand_distr::weighted::alias_method`](https://docs.rs/rand_distr/*/rand_distr/weighted/alias_method/index.html)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":80908,"byte_end":81024,"line_start":32,"line_end":32,"column_start":1,"column_end":117}},{"value":"/ supports `O(1)` sampling, but with much higher initialisation cost.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81025,"byte_end":81096,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81097,"byte_end":81100,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ A `WeightedIndex<X>` contains a `Vec<X>` and a [`Uniform<X>`] and so its","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81101,"byte_end":81177,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ size is the sum of the size of those objects, possibly plus some alignment.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81178,"byte_end":81257,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81258,"byte_end":81261,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Creating a `WeightedIndex<X>` will allocate enough space to hold `N - 1`","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81262,"byte_end":81338,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ weights of type `X`, where `N` is the number of weights. However, since","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81339,"byte_end":81414,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ `Vec` doesn't guarantee a particular growth strategy, additional memory","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81415,"byte_end":81490,"line_start":40,"line_end":40,"column_start":1,"column_end":76}},{"value":"/ might be allocated but not used. Since the `WeightedIndex` object also","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81491,"byte_end":81565,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ contains, this might cause additional allocations, though for primitive","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81566,"byte_end":81641,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ types, ['Uniform<X>`] doesn't allocate any memory.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81642,"byte_end":81696,"line_start":43,"line_end":43,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81697,"byte_end":81700,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Sampling from `WeightedIndex` will result in a single call to","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81701,"byte_end":81766,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/ `Uniform<X>::sample` (method of the [`Distribution`] trait), which typically","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81767,"byte_end":81847,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ will request a single value from the underlying [`RngCore`], though the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81848,"byte_end":81923,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ exact number depends on the implementaiton of `Uniform<X>::sample`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81924,"byte_end":81995,"line_start":48,"line_end":48,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":81996,"byte_end":81999,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82000,"byte_end":82013,"line_start":50,"line_end":50,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82014,"byte_end":82017,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82018,"byte_end":82025,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82026,"byte_end":82051,"line_start":53,"line_end":53,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::WeightedIndex;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82052,"byte_end":82095,"line_start":54,"line_end":54,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82096,"byte_end":82099,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ let choices = ['a', 'b', 'c'];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82100,"byte_end":82134,"line_start":56,"line_end":56,"column_start":1,"column_end":35}},{"value":"/ let weights = [2,   1,   1];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82135,"byte_end":82167,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(&weights).unwrap();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82168,"byte_end":82221,"line_start":58,"line_end":58,"column_start":1,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82222,"byte_end":82253,"line_start":59,"line_end":59,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82254,"byte_end":82275,"line_start":60,"line_end":60,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82276,"byte_end":82360,"line_start":61,"line_end":61,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82361,"byte_end":82416,"line_start":62,"line_end":62,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82417,"byte_end":82422,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82423,"byte_end":82426,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82427,"byte_end":82474,"line_start":65,"line_end":65,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82475,"byte_end":82552,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/ for _ in 0..100 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82553,"byte_end":82574,"line_start":67,"line_end":67,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82575,"byte_end":82658,"line_start":68,"line_end":68,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82659,"byte_end":82715,"line_start":69,"line_end":69,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82716,"byte_end":82721,"line_start":70,"line_end":70,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82722,"byte_end":82729,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82730,"byte_end":82733,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82734,"byte_end":82792,"line_start":73,"line_end":73,"column_start":1,"column_end":59}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82793,"byte_end":82824,"line_start":74,"line_end":74,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83447,"byte_end":83450,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"fn <I> (weights: I) -> Result<WeightedIndex<X>, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[{"value":"/ Creates a new a `WeightedIndex` [`Distribution`] using the values","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83059,"byte_end":83128,"line_start":83,"line_end":83,"column_start":5,"column_end":74}},{"value":"/ in `weights`. The weights can use any type `X` for which an","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83133,"byte_end":83196,"line_start":84,"line_end":84,"column_start":5,"column_end":68}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83201,"byte_end":83245,"line_start":85,"line_end":85,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83250,"byte_end":83253,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the iterator is empty, if any weight is `< 0`, or","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83258,"byte_end":83331,"line_start":87,"line_end":87,"column_start":5,"column_end":78}},{"value":"/ if its total value is 0.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83336,"byte_end":83364,"line_start":88,"line_end":88,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83369,"byte_end":83372,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83377,"byte_end":83435,"line_start":90,"line_end":90,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84981,"byte_end":84995,"line_start":135,"line_end":135,"column_start":12,"column_end":26},"name":"update_weights","qualname":"<WeightedIndex<X>>::update_weights","value":"fn (&mut self, new_weights: &[(usize, &X)]) -> Result<(), WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Update a subset of weights, without changing the number of weights.","sig":null,"attributes":[{"value":"/ Update a subset of weights, without changing the number of weights.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84558,"byte_end":84629,"line_start":126,"line_end":126,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84634,"byte_end":84637,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ `new_weights` must be sorted by the index.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84642,"byte_end":84688,"line_start":128,"line_end":128,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84693,"byte_end":84696,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Using this method instead of `new` might be more efficient if only a small number of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84701,"byte_end":84789,"line_start":130,"line_end":130,"column_start":5,"column_end":93}},{"value":"/ weights is modified. No allocations are performed, unless the weight type `X` uses","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84794,"byte_end":84880,"line_start":131,"line_end":131,"column_start":5,"column_end":91}},{"value":"/ allocation internally.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84885,"byte_end":84911,"line_start":132,"line_end":132,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84916,"byte_end":84919,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ In case of error, `self` is not modified.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84924,"byte_end":84969,"line_start":134,"line_end":134,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93272,"byte_end":93278,"line_start":379,"line_end":379,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted_index::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[{"value":"/ The provided weight collection contains no items.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93214,"byte_end":93267,"line_start":378,"line_end":378,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":990},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93393,"byte_end":93406,"line_start":383,"line_end":383,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted_index::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum or\n otherwise invalid.\n","sig":null,"attributes":[{"value":"/ A weight is either less than zero, greater than the supported maximum or","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93285,"byte_end":93361,"line_start":381,"line_end":381,"column_start":5,"column_end":81}},{"value":"/ otherwise invalid.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93366,"byte_end":93388,"line_start":382,"line_end":382,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":992},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93475,"byte_end":93489,"line_start":386,"line_end":386,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted_index::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[{"value":"/ All items in the provided weight collection are zero.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93413,"byte_end":93470,"line_start":385,"line_end":385,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93567,"byte_end":93574,"line_start":389,"line_end":389,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted_index::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[{"value":"/ Too many weights are provided (length greater than `u32::MAX`)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93496,"byte_end":93562,"line_start":388,"line_end":388,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93194,"byte_end":93207,"line_start":377,"line_end":377,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted_index::WeightedError","value":"WeightedError::{NoItem, InvalidWeight, AllWeightsZero, TooMany}","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `WeightedIndex::new`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93089,"byte_end":93139,"line_start":375,"line_end":375,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1007},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95646,"byte_end":95658,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":94693,"byte_end":94771,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":94772,"byte_end":94822,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":94823,"byte_end":94826,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":94827,"byte_end":94901,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":94902,"byte_end":94979,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":94980,"byte_end":95053,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95054,"byte_end":95080,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95081,"byte_end":95084,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95085,"byte_end":95151,"line_start":25,"line_end":25,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95152,"byte_end":95228,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95229,"byte_end":95240,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95241,"byte_end":95244,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95245,"byte_end":95258,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95259,"byte_end":95266,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95267,"byte_end":95299,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95300,"byte_end":95342,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95343,"byte_end":95346,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95347,"byte_end":95400,"line_start":34,"line_end":34,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95401,"byte_end":95442,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95443,"byte_end":95450,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95451,"byte_end":95454,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95455,"byte_end":95503,"line_start":38,"line_end":38,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95504,"byte_end":95548,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95549,"byte_end":95604,"line_start":40,"line_end":40,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96589,"byte_end":96595,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95661,"byte_end":95734,"line_start":44,"line_end":44,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95735,"byte_end":95793,"line_start":45,"line_end":45,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95794,"byte_end":95797,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95798,"byte_end":95877,"line_start":47,"line_end":47,"column_start":1,"column_end":78}},{"value":"/ the 23 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95878,"byte_end":95957,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":95958,"byte_end":96017,"line_start":49,"line_end":49,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96018,"byte_end":96021,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96022,"byte_end":96094,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96095,"byte_end":96171,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96172,"byte_end":96183,"line_start":53,"line_end":53,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96184,"byte_end":96187,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96188,"byte_end":96201,"line_start":55,"line_end":55,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96202,"byte_end":96209,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96210,"byte_end":96242,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96243,"byte_end":96279,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96280,"byte_end":96283,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96284,"byte_end":96331,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96332,"byte_end":96373,"line_start":61,"line_end":61,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96374,"byte_end":96381,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96382,"byte_end":96385,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96386,"byte_end":96434,"line_start":64,"line_end":64,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96435,"byte_end":96491,"line_start":65,"line_end":65,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96492,"byte_end":96547,"line_start":66,"line_end":66,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96705,"byte_end":96714,"line_start":73,"line_end":73,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96726,"byte_end":96727,"line_start":74,"line_end":74,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97129,"byte_end":97153,"line_start":84,"line_end":84,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"fn (self, exponent: i32) -> Self::F","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a contant exponent into a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96734,"byte_end":96805,"line_start":76,"line_end":76,"column_start":5,"column_end":76}},{"value":"/ float.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96810,"byte_end":96820,"line_start":77,"line_end":77,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96825,"byte_end":96828,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96833,"byte_end":96907,"line_start":79,"line_end":79,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96912,"byte_end":96929,"line_start":80,"line_end":80,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":96934,"byte_end":97008,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97013,"byte_end":97064,"line_start":82,"line_end":82,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97069,"byte_end":97121,"line_start":83,"line_end":83,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10184,"byte_end":10197,"line_start":116,"line_end":116,"column_start":9,"column_end":22},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":163}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116605,"byte_end":116617,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `char`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.","sig":null,"attributes":[{"value":"/ Sample a `char`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116136,"byte_end":116210,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116211,"byte_end":116232,"line_start":20,"line_end":20,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116233,"byte_end":116236,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116237,"byte_end":116250,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116251,"byte_end":116254,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116255,"byte_end":116262,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116263,"byte_end":116281,"line_start":25,"line_end":25,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116282,"byte_end":116314,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116315,"byte_end":116357,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116358,"byte_end":116361,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116362,"byte_end":116393,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116394,"byte_end":116434,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116435,"byte_end":116482,"line_start":31,"line_end":31,"column_start":1,"column_end":48}},{"value":"/         .take(7)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116483,"byte_end":116503,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116504,"byte_end":116527,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116528,"byte_end":116568,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116569,"byte_end":116576,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":124933,"byte_end":124939,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":132195,"byte_end":132199,"line_start":226,"line_end":226,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":132714,"byte_end":132718,"line_start":238,"line_end":238,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11318,"byte_end":11330,"line_start":141,"line_end":141,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":270}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10297,"byte_end":10375,"line_start":123,"line_end":123,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10376,"byte_end":10379,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10380,"byte_end":10445,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10446,"byte_end":10517,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10518,"byte_end":10597,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10598,"byte_end":10658,"line_start":128,"line_end":128,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10659,"byte_end":10662,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10663,"byte_end":10741,"line_start":130,"line_end":130,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10742,"byte_end":10810,"line_start":131,"line_end":131,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10811,"byte_end":10884,"line_start":132,"line_end":132,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10885,"byte_end":10888,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10889,"byte_end":10964,"line_start":134,"line_end":134,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10965,"byte_end":11023,"line_start":135,"line_end":135,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11024,"byte_end":11102,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11103,"byte_end":11181,"line_start":137,"line_end":137,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11182,"byte_end":11249,"line_start":138,"line_end":138,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11250,"byte_end":11253,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::method.sample_iter","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11254,"byte_end":11307,"line_start":140,"line_end":140,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11424,"byte_end":11430,"line_start":143,"line_end":143,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"fn <R> (&self, rng: &mut R) -> T","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11340,"byte_end":11416,"line_start":142,"line_end":142,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12637,"byte_end":12648,"line_start":175,"line_end":175,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"fn <R> (self, rng: R) -> DistIter<Self, R, T>","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11479,"byte_end":11553,"line_start":145,"line_end":145,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11558,"byte_end":11587,"line_start":146,"line_end":146,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11592,"byte_end":11595,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11600,"byte_end":11667,"line_start":148,"line_end":148,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11672,"byte_end":11740,"line_start":149,"line_end":149,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11745,"byte_end":11818,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11823,"byte_end":11892,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11897,"byte_end":11964,"line_start":152,"line_end":152,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11969,"byte_end":11972,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11977,"byte_end":11990,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11995,"byte_end":11998,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12003,"byte_end":12010,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12015,"byte_end":12040,"line_start":157,"line_end":157,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12045,"byte_end":12122,"line_start":158,"line_end":158,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12127,"byte_end":12130,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ let rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12135,"byte_end":12162,"line_start":160,"line_end":160,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12167,"byte_end":12170,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12175,"byte_end":12198,"line_start":162,"line_end":162,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(rng).take(16).collect();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12203,"byte_end":12270,"line_start":163,"line_end":163,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12275,"byte_end":12278,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12283,"byte_end":12297,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric.sample_iter(rng).take(7).collect();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12302,"byte_end":12370,"line_start":166,"line_end":166,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12375,"byte_end":12378,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12383,"byte_end":12403,"line_start":168,"line_end":168,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12408,"byte_end":12457,"line_start":169,"line_end":169,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(rng);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12462,"byte_end":12512,"line_start":170,"line_end":170,"column_start":5,"column_end":55}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12517,"byte_end":12558,"line_start":171,"line_end":171,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12563,"byte_end":12607,"line_start":172,"line_end":172,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12612,"byte_end":12617,"line_start":173,"line_end":173,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12622,"byte_end":12629,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1450},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13346,"byte_end":13354,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13029,"byte_end":13103,"line_start":195,"line_end":195,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13104,"byte_end":13146,"line_start":196,"line_end":196,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13147,"byte_end":13150,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13151,"byte_end":13230,"line_start":198,"line_end":198,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13231,"byte_end":13266,"line_start":199,"line_end":199,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13267,"byte_end":13270,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13271,"byte_end":13317,"line_start":201,"line_end":201,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1462},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17519,"byte_end":17527,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14238,"byte_end":14316,"line_start":245,"line_end":245,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14317,"byte_end":14397,"line_start":246,"line_end":246,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14398,"byte_end":14432,"line_start":247,"line_end":247,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14433,"byte_end":14436,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14437,"byte_end":14468,"line_start":249,"line_end":249,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14469,"byte_end":14472,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14473,"byte_end":14543,"line_start":251,"line_end":251,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14544,"byte_end":14608,"line_start":252,"line_end":252,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14609,"byte_end":14612,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14613,"byte_end":14689,"line_start":254,"line_end":254,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14690,"byte_end":14724,"line_start":255,"line_end":255,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14725,"byte_end":14801,"line_start":256,"line_end":256,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14802,"byte_end":14870,"line_start":257,"line_end":257,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14871,"byte_end":14937,"line_start":258,"line_end":258,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14938,"byte_end":14976,"line_start":259,"line_end":259,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14977,"byte_end":15046,"line_start":260,"line_end":260,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15047,"byte_end":15121,"line_start":261,"line_end":261,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15122,"byte_end":15170,"line_start":262,"line_end":262,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15171,"byte_end":15247,"line_start":263,"line_end":263,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15248,"byte_end":15278,"line_start":264,"line_end":264,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15279,"byte_end":15282,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15283,"byte_end":15356,"line_start":266,"line_end":266,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15357,"byte_end":15416,"line_start":267,"line_end":267,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15417,"byte_end":15420,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15421,"byte_end":15496,"line_start":269,"line_end":269,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15497,"byte_end":15572,"line_start":270,"line_end":270,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15573,"byte_end":15653,"line_start":271,"line_end":271,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15654,"byte_end":15719,"line_start":272,"line_end":272,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15720,"byte_end":15799,"line_start":273,"line_end":273,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15800,"byte_end":15867,"line_start":274,"line_end":274,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15868,"byte_end":15871,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15872,"byte_end":15901,"line_start":276,"line_end":276,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15902,"byte_end":15905,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15906,"byte_end":15985,"line_start":278,"line_end":278,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15986,"byte_end":15989,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15990,"byte_end":15997,"line_start":280,"line_end":280,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15998,"byte_end":16024,"line_start":281,"line_end":281,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16025,"byte_end":16043,"line_start":282,"line_end":282,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16044,"byte_end":16098,"line_start":283,"line_end":283,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16099,"byte_end":16102,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16103,"byte_end":16121,"line_start":285,"line_end":285,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16122,"byte_end":16137,"line_start":286,"line_end":286,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16138,"byte_end":16143,"line_start":287,"line_end":287,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16144,"byte_end":16147,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16148,"byte_end":16191,"line_start":289,"line_end":289,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16192,"byte_end":16257,"line_start":290,"line_end":290,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16258,"byte_end":16292,"line_start":291,"line_end":291,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16293,"byte_end":16302,"line_start":292,"line_end":292,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16303,"byte_end":16308,"line_start":293,"line_end":293,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16309,"byte_end":16316,"line_start":294,"line_end":294,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16317,"byte_end":16320,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16321,"byte_end":16341,"line_start":296,"line_end":296,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16342,"byte_end":16349,"line_start":297,"line_end":297,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16350,"byte_end":16375,"line_start":298,"line_end":298,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16376,"byte_end":16414,"line_start":299,"line_end":299,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16415,"byte_end":16418,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16419,"byte_end":16478,"line_start":301,"line_end":301,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16479,"byte_end":16520,"line_start":302,"line_end":302,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16521,"byte_end":16528,"line_start":303,"line_end":303,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16529,"byte_end":16532,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16533,"byte_end":16568,"line_start":305,"line_end":305,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16569,"byte_end":16649,"line_start":306,"line_end":306,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16650,"byte_end":16714,"line_start":307,"line_end":307,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16715,"byte_end":16718,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16719,"byte_end":16793,"line_start":309,"line_end":309,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16794,"byte_end":16871,"line_start":310,"line_end":310,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16872,"byte_end":16945,"line_start":311,"line_end":311,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16946,"byte_end":17016,"line_start":312,"line_end":312,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17017,"byte_end":17020,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17021,"byte_end":17097,"line_start":314,"line_end":314,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0, 1)` which also samples from","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17098,"byte_end":17174,"line_start":315,"line_end":315,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` and `gen_range` (which uses [`Uniform`]) use","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17175,"byte_end":17252,"line_start":316,"line_end":316,"column_start":1,"column_end":78}},{"value":"/ transmute-based methods which yield 1 bit less precision but may perform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17253,"byte_end":17329,"line_start":317,"line_end":317,"column_start":1,"column_end":77}},{"value":"/ faster on some architectures (on modern Intel CPUs all methods have","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17330,"byte_end":17401,"line_start":318,"line_end":318,"column_start":1,"column_end":72}},{"value":"/ approximately equal performance).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17402,"byte_end":17439,"line_start":319,"line_end":319,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17440,"byte_end":17443,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17444,"byte_end":17477,"line_start":321,"line_end":321,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":299}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"! Convenience re-export of common members","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138656,"byte_end":138699,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138700,"byte_end":138703,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138704,"byte_end":138780,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"! common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138781,"byte_end":138860,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"! be imported manually:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138861,"byte_end":138886,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138887,"byte_end":138890,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138891,"byte_end":138898,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138899,"byte_end":138924,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"! # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138925,"byte_end":138983,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"! # let _: f32 = r.gen();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":138984,"byte_end":139011,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":139012,"byte_end":139019,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141763,"byte_end":141766,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"Rng","qualname":"::rng::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":339}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140235,"byte_end":140319,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140320,"byte_end":140390,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140391,"byte_end":140394,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140395,"byte_end":140462,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140463,"byte_end":140466,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140467,"byte_end":140486,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140487,"byte_end":140490,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140491,"byte_end":140561,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140562,"byte_end":140595,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140596,"byte_end":140599,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140600,"byte_end":140676,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140677,"byte_end":140734,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140735,"byte_end":140809,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140810,"byte_end":140886,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140887,"byte_end":140943,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140944,"byte_end":140947,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":140948,"byte_end":141027,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141028,"byte_end":141107,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141108,"byte_end":141187,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141188,"byte_end":141266,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141267,"byte_end":141343,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141344,"byte_end":141418,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141419,"byte_end":141495,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141496,"byte_end":141548,"line_start":41,"line_end":41,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141549,"byte_end":141552,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141553,"byte_end":141565,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141566,"byte_end":141569,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141570,"byte_end":141577,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141578,"byte_end":141605,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141606,"byte_end":141624,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141625,"byte_end":141628,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141629,"byte_end":141678,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141679,"byte_end":141696,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141697,"byte_end":141702,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141703,"byte_end":141706,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141707,"byte_end":141744,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141745,"byte_end":141752,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142916,"byte_end":142919,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"gen","qualname":"::rng::Rng::gen","value":"fn <T> (&mut self) -> T","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141782,"byte_end":141849,"line_start":56,"line_end":56,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141854,"byte_end":141857,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141862,"byte_end":141875,"line_start":58,"line_end":58,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141880,"byte_end":141883,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141888,"byte_end":141895,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141900,"byte_end":141932,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141937,"byte_end":141940,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141945,"byte_end":141976,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141981,"byte_end":142008,"line_start":64,"line_end":64,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142013,"byte_end":142035,"line_start":65,"line_end":65,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142040,"byte_end":142087,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142092,"byte_end":142099,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142104,"byte_end":142107,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142112,"byte_end":142135,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142140,"byte_end":142143,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142148,"byte_end":142221,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142226,"byte_end":142297,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142302,"byte_end":142316,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142321,"byte_end":142324,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142329,"byte_end":142402,"line_start":75,"line_end":75,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142407,"byte_end":142477,"line_start":76,"line_end":76,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142482,"byte_end":142485,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142490,"byte_end":142497,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142502,"byte_end":142534,"line_start":79,"line_end":79,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142539,"byte_end":142542,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142547,"byte_end":142578,"line_start":81,"line_end":81,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142583,"byte_end":142653,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142658,"byte_end":142661,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142666,"byte_end":142731,"line_start":84,"line_end":84,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142736,"byte_end":142766,"line_start":85,"line_end":85,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142771,"byte_end":142828,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142833,"byte_end":142840,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142845,"byte_end":142848,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142853,"byte_end":142894,"line_start":89,"line_end":89,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":142899,"byte_end":142908,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143794,"byte_end":143803,"line_start":120,"line_end":120,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::rng::Rng::gen_range","value":"fn <T, B1, B2> (&mut self, low: B1, high: B2) -> T","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Generate a random value in the range [`low`, `high`), i.e. inclusive of\n `low` and exclusive of `high`.","sig":null,"attributes":[{"value":"/ Generate a random value in the range [`low`, `high`), i.e. inclusive of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143018,"byte_end":143093,"line_start":96,"line_end":96,"column_start":5,"column_end":80}},{"value":"/ `low` and exclusive of `high`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143098,"byte_end":143132,"line_start":97,"line_end":97,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143137,"byte_end":143140,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143145,"byte_end":143217,"line_start":99,"line_end":99,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143222,"byte_end":143290,"line_start":100,"line_end":100,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143295,"byte_end":143367,"line_start":101,"line_end":101,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143372,"byte_end":143375,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143380,"byte_end":143392,"line_start":103,"line_end":103,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143397,"byte_end":143400,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Panics if `low >= high`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143405,"byte_end":143433,"line_start":105,"line_end":105,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143438,"byte_end":143441,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143446,"byte_end":143459,"line_start":107,"line_end":107,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143464,"byte_end":143467,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143472,"byte_end":143479,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143484,"byte_end":143516,"line_start":110,"line_end":110,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143521,"byte_end":143524,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143529,"byte_end":143560,"line_start":112,"line_end":112,"column_start":5,"column_end":36}},{"value":"/ let n: u32 = rng.gen_range(0, 10);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143565,"byte_end":143603,"line_start":113,"line_end":113,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143608,"byte_end":143630,"line_start":114,"line_end":114,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0f64, 1.3e5f64);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143635,"byte_end":143686,"line_start":115,"line_end":115,"column_start":5,"column_end":56}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143691,"byte_end":143713,"line_start":116,"line_end":116,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143718,"byte_end":143725,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143730,"byte_end":143733,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":143738,"byte_end":143786,"line_start":119,"line_end":119,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144493,"byte_end":144499,"line_start":142,"line_end":142,"column_start":8,"column_end":14},"name":"sample","qualname":"::rng::Rng::sample","value":"fn <T, D> (&mut self, distr: D) -> T","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144017,"byte_end":144070,"line_start":128,"line_end":128,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144075,"byte_end":144078,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144083,"byte_end":144098,"line_start":130,"line_end":130,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144103,"byte_end":144106,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144111,"byte_end":144118,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144123,"byte_end":144155,"line_start":133,"line_end":133,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144160,"byte_end":144197,"line_start":134,"line_end":134,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144202,"byte_end":144205,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144210,"byte_end":144241,"line_start":136,"line_end":136,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144246,"byte_end":144294,"line_start":137,"line_end":137,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144299,"byte_end":144372,"line_start":138,"line_end":138,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144377,"byte_end":144413,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144418,"byte_end":144473,"line_start":140,"line_end":140,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144478,"byte_end":144485,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145813,"byte_end":145824,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::rng::Rng::sample_iter","value":"fn <T, D> (self, distr: D) -> distributions::DistIter<D, Self, T>","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144589,"byte_end":144663,"line_start":146,"line_end":146,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144668,"byte_end":144671,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144676,"byte_end":144750,"line_start":148,"line_end":148,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144755,"byte_end":144791,"line_start":149,"line_end":149,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144796,"byte_end":144843,"line_start":150,"line_end":150,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144848,"byte_end":144919,"line_start":151,"line_end":151,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144924,"byte_end":144983,"line_start":152,"line_end":152,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144988,"byte_end":144991,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144996,"byte_end":145009,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145014,"byte_end":145017,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145022,"byte_end":145029,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145034,"byte_end":145066,"line_start":157,"line_end":157,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145071,"byte_end":145134,"line_start":158,"line_end":158,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145139,"byte_end":145142,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ let rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145147,"byte_end":145174,"line_start":160,"line_end":160,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145179,"byte_end":145182,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145187,"byte_end":145210,"line_start":162,"line_end":162,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = rng.sample_iter(Standard).take(16).collect();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145215,"byte_end":145282,"line_start":163,"line_end":163,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145287,"byte_end":145290,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145295,"byte_end":145309,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/ let s: String = rng.sample_iter(Alphanumeric).take(7).collect();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145314,"byte_end":145382,"line_start":166,"line_end":166,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145387,"byte_end":145390,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145395,"byte_end":145417,"line_start":168,"line_end":168,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.sample_iter(Standard).take(5)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145422,"byte_end":145476,"line_start":169,"line_end":169,"column_start":5,"column_end":59}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145481,"byte_end":145546,"line_start":170,"line_end":170,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145551,"byte_end":145554,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145559,"byte_end":145579,"line_start":172,"line_end":172,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145584,"byte_end":145633,"line_start":173,"line_end":173,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = rng.sample_iter(die_range);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145638,"byte_end":145688,"line_start":174,"line_end":174,"column_start":5,"column_end":55}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145693,"byte_end":145734,"line_start":175,"line_end":175,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145739,"byte_end":145783,"line_start":176,"line_end":176,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145788,"byte_end":145793,"line_start":177,"line_end":177,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145798,"byte_end":145805,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146558,"byte_end":146562,"line_start":205,"line_end":205,"column_start":8,"column_end":12},"name":"fill","qualname":"::rng::Rng::fill","value":"fn <T> (&mut self, dest: &mut T) -> ()","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145994,"byte_end":146050,"line_start":187,"line_end":187,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146055,"byte_end":146058,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146063,"byte_end":146136,"line_start":189,"line_end":189,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146141,"byte_end":146203,"line_start":190,"line_end":190,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146208,"byte_end":146211,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`try_fill`] except that it panics on error.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146216,"byte_end":146285,"line_start":192,"line_end":192,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146290,"byte_end":146293,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146298,"byte_end":146311,"line_start":194,"line_end":194,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146316,"byte_end":146319,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146324,"byte_end":146331,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146336,"byte_end":146368,"line_start":197,"line_end":197,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146373,"byte_end":146376,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146381,"byte_end":146409,"line_start":199,"line_end":199,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146414,"byte_end":146450,"line_start":200,"line_end":200,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146455,"byte_end":146462,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146467,"byte_end":146470,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146475,"byte_end":146514,"line_start":203,"line_end":203,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146519,"byte_end":146550,"line_start":204,"line_end":204,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147402,"byte_end":147410,"line_start":233,"line_end":233,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Rng::try_fill","value":"fn <T> (&mut self, dest: &mut T) -> Result<(), Error>","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146694,"byte_end":146750,"line_start":209,"line_end":209,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146755,"byte_end":146758,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146763,"byte_end":146836,"line_start":211,"line_end":211,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146841,"byte_end":146903,"line_start":212,"line_end":212,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146908,"byte_end":146911,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it forwards errors.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146916,"byte_end":146981,"line_start":214,"line_end":214,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146986,"byte_end":146989,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146994,"byte_end":147007,"line_start":216,"line_end":216,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147012,"byte_end":147015,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147020,"byte_end":147027,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147032,"byte_end":147054,"line_start":219,"line_end":219,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147059,"byte_end":147091,"line_start":220,"line_end":220,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147096,"byte_end":147099,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147104,"byte_end":147147,"line_start":222,"line_end":222,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147152,"byte_end":147180,"line_start":223,"line_end":223,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147185,"byte_end":147226,"line_start":224,"line_end":224,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147231,"byte_end":147243,"line_start":225,"line_end":225,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147248,"byte_end":147255,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147260,"byte_end":147263,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147268,"byte_end":147294,"line_start":228,"line_end":228,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147299,"byte_end":147306,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147311,"byte_end":147314,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147319,"byte_end":147366,"line_start":231,"line_end":231,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147371,"byte_end":147394,"line_start":232,"line_end":232,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148047,"byte_end":148055,"line_start":257,"line_end":257,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::rng::Rng::gen_bool","value":"fn (&mut self, p: f64) -> bool","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147516,"byte_end":147571,"line_start":237,"line_end":237,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147576,"byte_end":147579,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147584,"byte_end":147651,"line_start":239,"line_end":239,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147656,"byte_end":147706,"line_start":240,"line_end":240,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147711,"byte_end":147714,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147719,"byte_end":147732,"line_start":242,"line_end":242,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147737,"byte_end":147740,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147745,"byte_end":147752,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147757,"byte_end":147789,"line_start":245,"line_end":245,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147794,"byte_end":147797,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147802,"byte_end":147833,"line_start":247,"line_end":247,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147838,"byte_end":147882,"line_start":248,"line_end":248,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147887,"byte_end":147894,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147899,"byte_end":147902,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147907,"byte_end":147919,"line_start":251,"line_end":251,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147924,"byte_end":147927,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147932,"byte_end":147958,"line_start":253,"line_end":253,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147963,"byte_end":147966,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147971,"byte_end":148025,"line_start":255,"line_end":255,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148030,"byte_end":148039,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149042,"byte_end":149051,"line_start":286,"line_end":286,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::rng::Rng::gen_ratio","value":"fn (&mut self, numerator: u32, denominator: u32) -> bool","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148178,"byte_end":148250,"line_start":262,"line_end":262,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148255,"byte_end":148326,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148331,"byte_end":148405,"line_start":264,"line_end":264,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148410,"byte_end":148480,"line_start":265,"line_end":265,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148485,"byte_end":148523,"line_start":266,"line_end":266,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148528,"byte_end":148531,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148536,"byte_end":148603,"line_start":268,"line_end":268,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148608,"byte_end":148676,"line_start":269,"line_end":269,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148681,"byte_end":148684,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148689,"byte_end":148701,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148706,"byte_end":148709,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148714,"byte_end":148769,"line_start":273,"line_end":273,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148774,"byte_end":148777,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148782,"byte_end":148795,"line_start":275,"line_end":275,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148800,"byte_end":148803,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148808,"byte_end":148815,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148820,"byte_end":148852,"line_start":278,"line_end":278,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148857,"byte_end":148860,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148865,"byte_end":148896,"line_start":280,"line_end":280,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148901,"byte_end":148941,"line_start":281,"line_end":281,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148946,"byte_end":148953,"line_start":282,"line_end":282,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148958,"byte_end":148961,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148966,"byte_end":149020,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149025,"byte_end":149034,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149600,"byte_end":149604,"line_start":301,"line_end":301,"column_start":11,"column_end":15},"name":"Fill","qualname":"::rng::Fill","value":"Fill","parent":null,"children":[{"krate":0,"index":343}],"decl_id":null,"docs":" Types which may be filled with random data","sig":null,"attributes":[{"value":"/ Types which may be filled with random data","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149266,"byte_end":149312,"line_start":294,"line_end":294,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149313,"byte_end":149316,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ This trait allows arrays to be efficiently filled with random data.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149317,"byte_end":149388,"line_start":296,"line_end":296,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149389,"byte_end":149392,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ Implementations are expected to be portable across machines unless","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149393,"byte_end":149463,"line_start":298,"line_end":298,"column_start":1,"column_end":71}},{"value":"/ clearly documented otherwise (see the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149464,"byte_end":149505,"line_start":299,"line_end":299,"column_start":1,"column_end":42}},{"value":"/ [Chapter on Portability](https://rust-random.github.io/book/portability.html)).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149506,"byte_end":149589,"line_start":300,"line_end":300,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149649,"byte_end":149657,"line_start":303,"line_end":303,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Fill::try_fill","value":"fn <R> (&mut self, rng: &mut R) -> Result<(), Error>","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Fill self with random data\n","sig":null,"attributes":[{"value":"/ Fill self with random data","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149611,"byte_end":149641,"line_start":302,"line_end":302,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":433},{"krate":0,"index":445},{"krate":0,"index":464},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"! Random number generators and adapters","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":157657,"byte_end":157698,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":157699,"byte_end":157702,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ## Background: Random number generators (RNGs)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":157703,"byte_end":157753,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":157754,"byte_end":157757,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":157758,"byte_end":157827,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"! random number generators as follows:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":157828,"byte_end":157868,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":157869,"byte_end":157872,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":157873,"byte_end":157953,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"!     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":157954,"byte_end":158032,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"!     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158033,"byte_end":158106,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"!     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158107,"byte_end":158187,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"!     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158188,"byte_end":158267,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"!     a hardware generator (HRNG).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158268,"byte_end":158304,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"! -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158305,"byte_end":158384,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"!     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158385,"byte_end":158463,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"!     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158464,"byte_end":158544,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"!     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158545,"byte_end":158621,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"!     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158622,"byte_end":158702,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"!     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158703,"byte_end":158783,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"!     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158784,"byte_end":158858,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"! -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158859,"byte_end":158935,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"!     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":158936,"byte_end":159012,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"!     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159013,"byte_end":159091,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159092,"byte_end":159095,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ## Traits and functionality","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159096,"byte_end":159127,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159128,"byte_end":159131,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159132,"byte_end":159207,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"! [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159208,"byte_end":159281,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"! additionally implement the [`CryptoRng`] trait.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159282,"byte_end":159333,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159334,"byte_end":159337,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159338,"byte_end":159411,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"! [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159412,"byte_end":159480,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159481,"byte_end":159484,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159485,"byte_end":159540,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"! -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159541,"byte_end":159605,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"! -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159606,"byte_end":159682,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"! -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159683,"byte_end":159746,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159747,"byte_end":159750,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159751,"byte_end":159815,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159816,"byte_end":159819,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"! ## Our generators","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159820,"byte_end":159841,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159842,"byte_end":159845,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! This crate provides several random number generators:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159846,"byte_end":159903,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159904,"byte_end":159907,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"! -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159908,"byte_end":159981,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"!     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":159982,"byte_end":160055,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"!     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160056,"byte_end":160120,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"! -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160121,"byte_end":160201,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"!     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160202,"byte_end":160280,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"!     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160281,"byte_end":160355,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"!     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160356,"byte_end":160413,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"! -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160414,"byte_end":160494,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"!     (based on reviews, maturity and usage). The current algorithm is ChaCha20,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160495,"byte_end":160577,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"!     which is well established and rigorously analysed.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160578,"byte_end":160636,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"!     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160637,"byte_end":160712,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"!     periodic reseeding.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160713,"byte_end":160740,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"! -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160741,"byte_end":160822,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"!     little memory, and have good output quality.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160823,"byte_end":160875,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160876,"byte_end":160879,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160880,"byte_end":160957,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"! release and may be platform-dependent, therefore they should be considered","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":160958,"byte_end":161036,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"! **not reproducible**.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161037,"byte_end":161062,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161063,"byte_end":161066,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! ## Additional generators","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161067,"byte_end":161095,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161096,"byte_end":161099,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"! **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161100,"byte_end":161175,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"! RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161176,"byte_end":161239,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"! The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161240,"byte_end":161309,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"! entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161310,"byte_end":161380,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"! [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161381,"byte_end":161451,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161452,"byte_end":161455,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161456,"byte_end":161534,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"! families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161535,"byte_end":161608,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"! [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161609,"byte_end":161687,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"! be used directly when **reproducibility** matters.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161688,"byte_end":161742,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"! Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161743,"byte_end":161817,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"! A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161818,"byte_end":161892,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161893,"byte_end":161896,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"! [`Rng`]: crate::Rng","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161897,"byte_end":161920,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"! [`RngCore`]: crate::RngCore","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161921,"byte_end":161952,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"! [`CryptoRng`]: crate::CryptoRng","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161953,"byte_end":161988,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"! [`SeedableRng`]: crate::SeedableRng","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":161989,"byte_end":162028,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"! [`thread_rng`]: crate::thread_rng","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162029,"byte_end":162066,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"! [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162067,"byte_end":162114,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"! [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162115,"byte_end":162172,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"! [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162173,"byte_end":162230,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"! [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162231,"byte_end":162282,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"! [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162283,"byte_end":162342,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"! [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162343,"byte_end":162390,"line_start":97,"line_end":97,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":375},{"krate":0,"index":429},{"krate":0,"index":432}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[{"value":"! Wrappers / adapters forming RNGs","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":163310,"byte_end":163346,"line_start":9,"line_end":9,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1747},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164987,"byte_end":164994,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":1749}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[{"value":"/ An RNG that reads random bytes straight from any type supporting","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164037,"byte_end":164105,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`std::io::Read`], for example files.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164106,"byte_end":164147,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164148,"byte_end":164151,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This will work best with an infinite reader, but that is not required.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164152,"byte_end":164226,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164227,"byte_end":164230,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This can be used with `/dev/urandom` on Unix but it is recommended to use","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164231,"byte_end":164308,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ [`OsRng`] instead.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164309,"byte_end":164331,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164332,"byte_end":164335,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164336,"byte_end":164348,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164349,"byte_end":164352,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `ReadRng` uses [`std::io::Read::read_exact`], which retries on interrupts.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164353,"byte_end":164431,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ All other errors from the underlying reader, including when it does not","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164432,"byte_end":164507,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ have enough data, will only be reported through [`try_fill_bytes`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164508,"byte_end":164579,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ The other [`RngCore`] methods will panic in case of an error.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164580,"byte_end":164645,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164646,"byte_end":164649,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164650,"byte_end":164663,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164664,"byte_end":164667,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164668,"byte_end":164675,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164676,"byte_end":164694,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::adapter::ReadRng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164695,"byte_end":164732,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164733,"byte_end":164736,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let data = vec![1, 2, 3, 4, 5, 6, 7, 8];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164737,"byte_end":164781,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ let mut rng = ReadRng::new(&data[..]);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164782,"byte_end":164824,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/ println!(\"{:x}\", rng.gen::<u32>());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164825,"byte_end":164864,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164865,"byte_end":164872,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164873,"byte_end":164876,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`OsRng`]: crate::rngs::OsRng","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164877,"byte_end":164910,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":164911,"byte_end":164958,"line_start":45,"line_end":45,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":165102,"byte_end":165105,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"fn (r: R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[{"value":"/ Create a new `ReadRng` from a `Read`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":165049,"byte_end":165090,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1753},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":166014,"byte_end":166023,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[{"value":"/ `ReadRng` error type","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":165961,"byte_end":165985,"line_start":87,"line_end":87,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170989,"byte_end":171001,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[{"value":"/ A wrapper around any PRNG that implements [`BlockRngCore`], that adds the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168388,"byte_end":168465,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ ability to reseed it.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168466,"byte_end":168491,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168492,"byte_end":168495,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `ReseedingRng` reseeds the underlying PRNG in the following cases:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168496,"byte_end":168566,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168567,"byte_end":168570,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - On a manual call to [`reseed()`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168571,"byte_end":168610,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - After `clone()`, the clone will be reseeded on first use.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168611,"byte_end":168674,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ - After a process is forked, the RNG in the child process is reseeded within","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168675,"byte_end":168755,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   the next few generated values, depending on the block size of the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168756,"byte_end":168827,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/   underlying PRNG. For ChaCha and Hc128 this is a maximum of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168828,"byte_end":168892,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/   15 `u32` values before reseeding.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168893,"byte_end":168932,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ - After the PRNG has generated a configurable number of random bytes.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":168933,"byte_end":169006,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169007,"byte_end":169010,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # When should reseeding after a fixed number of generated bytes be used?","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169011,"byte_end":169087,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169088,"byte_end":169091,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Reseeding after a fixed number of generated bytes is never strictly","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169092,"byte_end":169163,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ *necessary*. Cryptographic PRNGs don't have a limited number of bytes they","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169164,"byte_end":169242,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ can output, or at least not a limit reachable in any practical way. There is","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169243,"byte_end":169323,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ no such thing as 'running out of entropy'.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169324,"byte_end":169370,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169371,"byte_end":169374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Occasionally reseeding can be seen as some form of 'security in depth'. Even","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169375,"byte_end":169455,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ if in the future a cryptographic weakness is found in the CSPRNG being used,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169456,"byte_end":169536,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ or a flaw in the implementation, occasionally reseeding should make","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169537,"byte_end":169608,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ exploiting it much more difficult or even impossible.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169609,"byte_end":169666,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169667,"byte_end":169670,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169671,"byte_end":169747,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ after a fixed number of generated bytes.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169748,"byte_end":169792,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169793,"byte_end":169796,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169797,"byte_end":169817,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169818,"byte_end":169821,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169822,"byte_end":169901,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ never panic but try to handle the error intelligently through some","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169902,"byte_end":169972,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ combination of retrying and delaying reseeding until later.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":169973,"byte_end":170036,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ If handling the source error fails `ReseedingRng` will continue generating","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170037,"byte_end":170115,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ data from the wrapped PRNG without reseeding.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170116,"byte_end":170165,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170166,"byte_end":170169,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Manually calling [`reseed()`] will not have this retry or delay logic, but","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170170,"byte_end":170248,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ reports the error.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170249,"byte_end":170271,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170272,"byte_end":170275,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170276,"byte_end":170289,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170290,"byte_end":170293,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170294,"byte_end":170301,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170302,"byte_end":170327,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ use rand_chacha::ChaCha20Core; // Internal part of ChaChaRng that","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170328,"byte_end":170397,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/                              // implements BlockRngCore","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170398,"byte_end":170457,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170458,"byte_end":170484,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::adapter::ReseedingRng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170485,"byte_end":170527,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170528,"byte_end":170531,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let prng = ChaCha20Core::from_entropy();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170532,"byte_end":170576,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let mut reseeding_rng = ReseedingRng::new(prng, 0, OsRng);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170577,"byte_end":170639,"line_start":67,"line_end":67,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170640,"byte_end":170643,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", reseeding_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170644,"byte_end":170691,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170692,"byte_end":170695,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let mut cloned_rng = reseeding_rng.clone();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170696,"byte_end":170743,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/ assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170744,"byte_end":170811,"line_start":72,"line_end":72,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170812,"byte_end":170819,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170820,"byte_end":170823,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: rand_core::block::BlockRngCore","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170824,"byte_end":170876,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/ [`ReseedingRng::new`]: ReseedingRng::new","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170877,"byte_end":170921,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/ [`reseed()`]: ReseedingRng::reseed","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":170922,"byte_end":170960,"line_start":77,"line_end":77,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171505,"byte_end":171508,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"fn (rng: R, threshold: u64, reseeder: Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` from an existing PRNG, combined with a RNG","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171208,"byte_end":171282,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ to use as reseeder.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171287,"byte_end":171310,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171315,"byte_end":171318,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ `threshold` sets the number of generated bytes after which to reseed the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171323,"byte_end":171399,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ PRNG. Set it to zero to never reseed based on the number of generated","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171404,"byte_end":171477,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/ values.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171482,"byte_end":171493,"line_start":94,"line_end":94,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171693,"byte_end":171699,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"fn (&mut self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[{"value":"/ Reseed the internal PRNG.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171652,"byte_end":171681,"line_start":99,"line_end":99,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":1779},{"krate":0,"index":1784},{"krate":0,"index":1782},{"krate":0,"index":438},{"krate":0,"index":440}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"! Mock random number generator","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180280,"byte_end":180312,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180838,"byte_end":180845,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180355,"byte_end":180417,"line_start":13,"line_end":13,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180418,"byte_end":180421,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180422,"byte_end":180496,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180497,"byte_end":180570,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180571,"byte_end":180607,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180608,"byte_end":180611,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180612,"byte_end":180619,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180620,"byte_end":180638,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180639,"byte_end":180673,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180674,"byte_end":180677,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180678,"byte_end":180718,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180719,"byte_end":180759,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180760,"byte_end":180794,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180795,"byte_end":180802,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":181035,"byte_end":181038,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"fn (initial: u64, increment: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180894,"byte_end":180963,"line_start":34,"line_end":34,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180968,"byte_end":181023,"line_start":35,"line_end":35,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":183228,"byte_end":183234,"line_start":36,"line_end":36,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182489,"byte_end":182567,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182568,"byte_end":182641,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182642,"byte_end":182688,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182689,"byte_end":182692,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used is the ChaCha block cipher with 20 rounds.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182693,"byte_end":182766,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ This may change as new evidence of cipher security and performance","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182767,"byte_end":182837,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/ becomes available.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182838,"byte_end":182860,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182861,"byte_end":182864,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182865,"byte_end":182941,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ due to dependence on configuration and possible replacement in future","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":182942,"byte_end":183015,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ library versions. For a secure reproducible generator, we recommend use of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":183016,"byte_end":183094,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ the [rand_chacha] crate directly.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":183095,"byte_end":183132,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":183133,"byte_end":183136,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":183137,"byte_end":183192,"line_start":34,"line_end":34,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187509,"byte_end":187518,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":1794}],"decl_id":null,"docs":" The type returned by [`thread_rng`], essentially just a reference to the\n PRNG in thread-local memory.","sig":null,"attributes":[{"value":"/ The type returned by [`thread_rng`], essentially just a reference to the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":186616,"byte_end":186692,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ PRNG in thread-local memory.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":186693,"byte_end":186725,"line_start":40,"line_end":40,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":186726,"byte_end":186729,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ `ThreadRng` uses the same PRNG as [`StdRng`] for security and performance.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":186730,"byte_end":186808,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ As hinted by the name, the generator is thread-local. `ThreadRng` is a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":186809,"byte_end":186883,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ handle to this generator and thus supports `Copy`, but not `Send` or `Sync`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":186884,"byte_end":186964,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":186965,"byte_end":186968,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Unlike `StdRng`, `ThreadRng` uses the  [`ReseedingRng`] wrapper to reseed","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":186969,"byte_end":187046,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ the PRNG from fresh entropy every 64 kiB of random data.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187047,"byte_end":187107,"line_start":47,"line_end":47,"column_start":1,"column_end":61}},{"value":"/ [`OsRng`] is used to provide seed data.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187108,"byte_end":187151,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187152,"byte_end":187155,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Note that the reseeding is done as an extra precaution against side-channel","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187156,"byte_end":187235,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ attacks and mis-use (e.g. if somehow weak entropy were supplied initially).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187236,"byte_end":187315,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ The PRNG algorithms used are assumed to be secure.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187316,"byte_end":187370,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187371,"byte_end":187374,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`ReseedingRng`]: crate::rngs::adapter::ReseedingRng","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187375,"byte_end":187431,"line_start":54,"line_end":54,"column_start":1,"column_end":57}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":187432,"byte_end":187467,"line_start":55,"line_end":55,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188408,"byte_end":188418,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"fn () -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[{"value":"/ Retrieve the lazily-initialized thread-local random number generator,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188031,"byte_end":188104,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/ seeded by the system. Intended to be used in method chaining style,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188105,"byte_end":188176,"line_start":74,"line_end":74,"column_start":1,"column_end":72}},{"value":"/ e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188177,"byte_end":188238,"line_start":75,"line_end":75,"column_start":1,"column_end":62}},{"value":"/ `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188239,"byte_end":188313,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ `ThreadRng::default()` equivalent.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188314,"byte_end":188352,"line_start":77,"line_end":77,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188353,"byte_end":188356,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ For more information see [`ThreadRng`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188357,"byte_end":188400,"line_start":79,"line_end":79,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":587},{"krate":0,"index":594},{"krate":0,"index":625},{"krate":0,"index":1838},{"krate":0,"index":1845},{"krate":0,"index":627},{"krate":0,"index":635},{"krate":0,"index":640}],"decl_id":null,"docs":" Sequence-related functionality","sig":null,"attributes":[{"value":"! Sequence-related functionality","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":189758,"byte_end":189792,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":189793,"byte_end":189796,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This module provides:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":189797,"byte_end":189822,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":189823,"byte_end":189826,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! *   [`SliceRandom`] slice sampling and mutation","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":189827,"byte_end":189878,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"! *   [`IteratorRandom`] iterator sampling","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":189879,"byte_end":189923,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"! *   [`index::sample`] low-level API to choose multiple indices from","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":189924,"byte_end":189995,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"!     `0..length`","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":189996,"byte_end":190015,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190016,"byte_end":190019,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! Also see:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190020,"byte_end":190033,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190034,"byte_end":190037,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! *   [`crate::distributions::weighted`] module which provides","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190038,"byte_end":190102,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"!     implementations of weighted index sampling.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190103,"byte_end":190154,"line_start":21,"line_end":21,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190155,"byte_end":190158,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190159,"byte_end":190236,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"! `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190237,"byte_end":190312,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"! small performance boost in some cases).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190313,"byte_end":190356,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":498},{"krate":0,"index":1805},{"krate":0,"index":1814},{"krate":0,"index":1812},{"krate":0,"index":499},{"krate":0,"index":507},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":1816},{"krate":0,"index":1824},{"krate":0,"index":516},{"krate":0,"index":523},{"krate":0,"index":1827},{"krate":0,"index":1836},{"krate":0,"index":1834},{"krate":0,"index":525},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190359,"byte_end":190384,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"! Low-level API for sampling indices","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":221650,"byte_end":221688,"line_start":9,"line_end":9,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222339,"byte_end":222342,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":1805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1809},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222377,"byte_end":222382,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":1805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1805},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222305,"byte_end":222313,"line_start":29,"line_end":29,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"IndexVec::{U32, USize}","parent":null,"children":[{"krate":0,"index":1806},{"krate":0,"index":1809}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[{"value":"/ A vector of indices.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222191,"byte_end":222215,"line_start":25,"line_end":25,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222216,"byte_end":222219,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Multiple internal representations are possible.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222220,"byte_end":222271,"line_start":27,"line_end":27,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222478,"byte_end":222481,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[{"value":"/ Returns the number of indices","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222419,"byte_end":222452,"line_start":37,"line_end":37,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222457,"byte_end":222466,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222699,"byte_end":222707,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexVec>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the length is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the length is 0.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222635,"byte_end":222673,"line_start":46,"line_end":46,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222678,"byte_end":222687,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223044,"byte_end":223049,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"fn (&self, index: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[{"value":"/ Return the value at the given `index`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222870,"byte_end":222912,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222917,"byte_end":222920,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ (Note: we cannot implement [`std::ops::Index`] because of lifetime","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222925,"byte_end":222995,"line_start":57,"line_end":57,"column_start":5,"column_end":75}},{"value":"/ restrictions.)","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223000,"byte_end":223018,"line_start":58,"line_end":58,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223023,"byte_end":223032,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223328,"byte_end":223336,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"fn (self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[{"value":"/ Return result as a `Vec<usize>`. Conversion may or may not be trivial.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223228,"byte_end":223302,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223307,"byte_end":223316,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223601,"byte_end":223605,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"fn (&self) -> IndexVecIter<'_>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Iterate over the indices as a sequence of `usize` values","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223515,"byte_end":223575,"line_start":76,"line_end":76,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223580,"byte_end":223589,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223915,"byte_end":223924,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"into_iter","qualname":"<IndexVec>::into_iter","value":"fn (self) -> IndexVecIntoIter","parent":null,"children":[],"decl_id":null,"docs":" Convert into an iterator over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Convert into an iterator over the indices as a sequence of `usize` values","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223812,"byte_end":223889,"line_start":85,"line_end":85,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":223894,"byte_end":223903,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1818},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225077,"byte_end":225080,"line_start":129,"line_end":129,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter<'a, u32>)","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1821},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225127,"byte_end":225132,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter<'a, usize>)","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1816},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225035,"byte_end":225047,"line_start":127,"line_end":127,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"IndexVecIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":1818},{"krate":0,"index":1821}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::iter`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":224972,"byte_end":225008,"line_start":125,"line_end":125,"column_start":1,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225868,"byte_end":225871,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1831},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225916,"byte_end":225921,"line_start":163,"line_end":163,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1827},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225826,"byte_end":225842,"line_start":159,"line_end":159,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"IndexVecIntoIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1831}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::into_iter`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225751,"byte_end":225792,"line_start":157,"line_end":157,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227597,"byte_end":227603,"line_start":213,"line_end":213,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"fn <R> (rng: &mut R, length: usize, amount: usize) -> IndexVec","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226529,"byte_end":226604,"line_start":191,"line_end":191,"column_start":1,"column_end":76}},{"value":"/ return them in random order (fully shuffled).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226605,"byte_end":226654,"line_start":192,"line_end":192,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226655,"byte_end":226658,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226659,"byte_end":226735,"line_start":194,"line_end":194,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226736,"byte_end":226813,"line_start":195,"line_end":195,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226814,"byte_end":226833,"line_start":196,"line_end":196,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226834,"byte_end":226837,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ The implementation used is not specified; we automatically select the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226838,"byte_end":226911,"line_start":198,"line_end":198,"column_start":1,"column_end":74}},{"value":"/ fastest available algorithm for the `length` and `amount` parameters","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226912,"byte_end":226984,"line_start":199,"line_end":199,"column_start":1,"column_end":73}},{"value":"/ (based on detailed profiling on an Intel Haswell CPU). Roughly speaking,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226985,"byte_end":227061,"line_start":200,"line_end":200,"column_start":1,"column_end":77}},{"value":"/ complexity is `O(amount)`, except that when `amount` is small, performance","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227062,"byte_end":227140,"line_start":201,"line_end":201,"column_start":1,"column_end":79}},{"value":"/ is closer to `O(amount^2)`, and when `length` is close to `amount` then","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227141,"byte_end":227216,"line_start":202,"line_end":202,"column_start":1,"column_end":76}},{"value":"/ `O(length)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227217,"byte_end":227233,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227234,"byte_end":227237,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ Note that performance is significantly better over `u32` indices than over","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227238,"byte_end":227316,"line_start":205,"line_end":205,"column_start":1,"column_end":79}},{"value":"/ `u64` indices. Because of this we hide the underlying type behind an","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227317,"byte_end":227389,"line_start":206,"line_end":206,"column_start":1,"column_end":73}},{"value":"/ abstraction, `IndexVec`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227390,"byte_end":227418,"line_start":207,"line_end":207,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227419,"byte_end":227422,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ If an allocation-free `no_std` function is required, it is suggested","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227423,"byte_end":227495,"line_start":209,"line_end":209,"column_start":1,"column_end":73}},{"value":"/ to adapt the internal `sample_floyd` implementation.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227496,"byte_end":227552,"line_start":210,"line_end":210,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227553,"byte_end":227556,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":227557,"byte_end":227589,"line_start":212,"line_end":212,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191332,"byte_end":191343,"line_start":59,"line_end":59,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":577},{"krate":0,"index":583},{"krate":0,"index":585}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190708,"byte_end":190786,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190787,"byte_end":190790,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190791,"byte_end":190864,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190865,"byte_end":190940,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190941,"byte_end":190944,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190945,"byte_end":190952,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190953,"byte_end":190984,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190985,"byte_end":190988,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190989,"byte_end":191004,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191005,"byte_end":191046,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/     let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191047,"byte_end":191113,"line_start":49,"line_end":49,"column_start":1,"column_end":67}},{"value":"/     bytes.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191114,"byte_end":191146,"line_start":50,"line_end":50,"column_start":1,"column_end":33}},{"value":"/     let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191147,"byte_end":191199,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/     println!(\"{}\", str);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191200,"byte_end":191228,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191229,"byte_end":191234,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191235,"byte_end":191242,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191243,"byte_end":191282,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191283,"byte_end":191294,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191295,"byte_end":191313,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191314,"byte_end":191321,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191381,"byte_end":191385,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191350,"byte_end":191371,"line_start":60,"line_end":60,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191871,"byte_end":191877,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"fn <R> (&self, rng: &mut R) -> Option<&Self::Item>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191392,"byte_end":191468,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191473,"byte_end":191492,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191497,"byte_end":191500,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191505,"byte_end":191542,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191547,"byte_end":191550,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191555,"byte_end":191568,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191573,"byte_end":191576,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191581,"byte_end":191588,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191593,"byte_end":191618,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191623,"byte_end":191654,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191659,"byte_end":191662,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191667,"byte_end":191706,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191711,"byte_end":191742,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191747,"byte_end":191794,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191799,"byte_end":191851,"line_start":77,"line_end":77,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191856,"byte_end":191863,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192122,"byte_end":192132,"line_start":86,"line_end":86,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"fn <R> (&mut self, rng: &mut R) -> Option<&mut Self::Item>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":191956,"byte_end":192026,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192031,"byte_end":192064,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192069,"byte_end":192072,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192077,"byte_end":192114,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193167,"byte_end":193182,"line_start":114,"line_end":114,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"fn <R> (&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Item>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"/ Chooses `amount` elements from the slice at random, without repetition,","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192219,"byte_end":192294,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ and in random order. The returned iterator is appropriate both for","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192299,"byte_end":192369,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ collection into a `Vec` and filling an existing buffer (see example).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192374,"byte_end":192447,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192452,"byte_end":192455,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ In case this API is not sufficiently flexible, use [`index::sample`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192460,"byte_end":192533,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192538,"byte_end":192541,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is the same as [`index::sample`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192546,"byte_end":192606,"line_start":95,"line_end":95,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192611,"byte_end":192614,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192619,"byte_end":192632,"line_start":97,"line_end":97,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192637,"byte_end":192644,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192649,"byte_end":192680,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192685,"byte_end":192688,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let mut rng = &mut rand::thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192693,"byte_end":192735,"line_start":101,"line_end":101,"column_start":5,"column_end":47}},{"value":"/ let sample = \"Hello, audience!\".as_bytes();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192740,"byte_end":192787,"line_start":102,"line_end":102,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192792,"byte_end":192795,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ // collect the results into a vector:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192800,"byte_end":192841,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/ let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192846,"byte_end":192922,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192927,"byte_end":192930,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ // store in a buffer:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192935,"byte_end":192960,"line_start":107,"line_end":107,"column_start":5,"column_end":30}},{"value":"/ let mut buf = [0u8; 5];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192965,"byte_end":192992,"line_start":108,"line_end":108,"column_start":5,"column_end":32}},{"value":"/ for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":192997,"byte_end":193083,"line_start":109,"line_end":109,"column_start":5,"column_end":91}},{"value":"/     *slot = *b;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193088,"byte_end":193107,"line_start":110,"line_end":110,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193112,"byte_end":193117,"line_start":111,"line_end":111,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193122,"byte_end":193129,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193134,"byte_end":193159,"line_start":113,"line_end":113,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194324,"byte_end":194339,"line_start":141,"line_end":141,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"fn <R, F, B, X> (&self, rng: &mut R, weight: F) -> Result<&Self::Item, WeightedError>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose`], but where the likelihood of each outcome may be","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193290,"byte_end":193364,"line_start":117,"line_end":117,"column_start":5,"column_end":79}},{"value":"/ specified.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193369,"byte_end":193383,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193388,"byte_end":193391,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193396,"byte_end":193464,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193469,"byte_end":193543,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193548,"byte_end":193619,"line_start":122,"line_end":122,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193624,"byte_end":193627,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193632,"byte_end":193683,"line_start":124,"line_end":124,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted_mut`], [`distributions::weighted`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193688,"byte_end":193754,"line_start":125,"line_end":125,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193759,"byte_end":193762,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193767,"byte_end":193780,"line_start":127,"line_end":127,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193785,"byte_end":193788,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193793,"byte_end":193800,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193805,"byte_end":193830,"line_start":130,"line_end":130,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193835,"byte_end":193838,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193843,"byte_end":193892,"line_start":132,"line_end":132,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193897,"byte_end":193928,"line_start":133,"line_end":133,"column_start":5,"column_end":36}},{"value":"/ // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":193933,"byte_end":194013,"line_start":134,"line_end":134,"column_start":5,"column_end":85}},{"value":"/ println!(\"{:?}\", choices.choose_weighted(&mut rng, |item| item.1).unwrap().0);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194018,"byte_end":194100,"line_start":135,"line_end":135,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194105,"byte_end":194112,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ [`choose`]: SliceRandom::choose","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194117,"byte_end":194152,"line_start":137,"line_end":137,"column_start":5,"column_end":40}},{"value":"/ [`choose_weighted_mut`]: SliceRandom::choose_weighted_mut","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194157,"byte_end":194218,"line_start":138,"line_end":138,"column_start":5,"column_end":66}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194223,"byte_end":194286,"line_start":139,"line_end":139,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194291,"byte_end":194316,"line_start":140,"line_end":140,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195382,"byte_end":195401,"line_start":168,"line_end":168,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"fn <R, F, B, X> (&mut self, rng: &mut R, weight: F) -> Result<&mut Self::Item, WeightedError>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose_mut`], but where the likelihood of each outcome may","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194698,"byte_end":194773,"line_start":154,"line_end":154,"column_start":5,"column_end":80}},{"value":"/ be specified.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194778,"byte_end":194795,"line_start":155,"line_end":155,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194800,"byte_end":194803,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194808,"byte_end":194876,"line_start":157,"line_end":157,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194881,"byte_end":194955,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":194960,"byte_end":195031,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195036,"byte_end":195039,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195044,"byte_end":195095,"line_start":161,"line_end":161,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted`], [`distributions::weighted`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195100,"byte_end":195162,"line_start":162,"line_end":162,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195167,"byte_end":195170,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ [`choose_mut`]: SliceRandom::choose_mut","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195175,"byte_end":195218,"line_start":164,"line_end":164,"column_start":5,"column_end":48}},{"value":"/ [`choose_weighted`]: SliceRandom::choose_weighted","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195223,"byte_end":195276,"line_start":165,"line_end":165,"column_start":5,"column_end":58}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195281,"byte_end":195344,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195349,"byte_end":195374,"line_start":167,"line_end":167,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196193,"byte_end":196200,"line_start":197,"line_end":197,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"fn <R> (&mut self, rng: &mut R) -> ()","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195768,"byte_end":195805,"line_start":181,"line_end":181,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195810,"byte_end":195813,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195818,"byte_end":195869,"line_start":183,"line_end":183,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195874,"byte_end":195877,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195882,"byte_end":195895,"line_start":185,"line_end":185,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195900,"byte_end":195903,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195908,"byte_end":195915,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195920,"byte_end":195951,"line_start":188,"line_end":188,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195956,"byte_end":195981,"line_start":189,"line_end":189,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195986,"byte_end":195989,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195994,"byte_end":196025,"line_start":191,"line_end":191,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196030,"byte_end":196062,"line_start":192,"line_end":192,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196067,"byte_end":196103,"line_start":193,"line_end":193,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196108,"byte_end":196132,"line_start":194,"line_end":194,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196137,"byte_end":196173,"line_start":195,"line_end":195,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196178,"byte_end":196185,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197065,"byte_end":197080,"line_start":217,"line_end":217,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"fn <R> (&mut self, rng: &mut R, amount: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196260,"byte_end":196305,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196310,"byte_end":196313,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196318,"byte_end":196390,"line_start":202,"line_end":202,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196395,"byte_end":196464,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196469,"byte_end":196510,"line_start":204,"line_end":204,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196515,"byte_end":196518,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196523,"byte_end":196597,"line_start":206,"line_end":206,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196602,"byte_end":196651,"line_start":207,"line_end":207,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196656,"byte_end":196659,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196664,"byte_end":196740,"line_start":209,"line_end":209,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196745,"byte_end":196791,"line_start":210,"line_end":210,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196796,"byte_end":196865,"line_start":211,"line_end":211,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196870,"byte_end":196873,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196878,"byte_end":196951,"line_start":213,"line_end":213,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196956,"byte_end":196988,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196993,"byte_end":196996,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197001,"byte_end":197057,"line_start":216,"line_end":216,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197757,"byte_end":197771,"line_start":242,"line_end":242,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197210,"byte_end":197278,"line_start":223,"line_end":223,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197279,"byte_end":197282,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all sized iterators, providing methods for","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197283,"byte_end":197358,"line_start":225,"line_end":225,"column_start":1,"column_end":76}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197359,"byte_end":197420,"line_start":226,"line_end":226,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197421,"byte_end":197424,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197425,"byte_end":197432,"line_start":228,"line_end":228,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197433,"byte_end":197467,"line_start":229,"line_end":229,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197468,"byte_end":197471,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197472,"byte_end":197487,"line_start":231,"line_end":231,"column_start":1,"column_end":16}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197488,"byte_end":197529,"line_start":232,"line_end":232,"column_start":1,"column_end":42}},{"value":"/     ","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197530,"byte_end":197538,"line_start":233,"line_end":233,"column_start":1,"column_end":9}},{"value":"/     let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197539,"byte_end":197586,"line_start":234,"line_end":234,"column_start":1,"column_end":30}},{"value":"/     println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197587,"byte_end":197657,"line_start":235,"line_end":235,"column_start":1,"column_end":71}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197658,"byte_end":197663,"line_start":236,"line_end":236,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197664,"byte_end":197671,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197672,"byte_end":197711,"line_start":238,"line_end":238,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197712,"byte_end":197723,"line_start":239,"line_end":239,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197724,"byte_end":197738,"line_start":240,"line_end":240,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197739,"byte_end":197746,"line_start":241,"line_end":241,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198404,"byte_end":198410,"line_start":255,"line_end":255,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"fn <R> (mut self, rng: &mut R) -> Option<Self::Item>","parent":{"krate":0,"index":587},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197796,"byte_end":197847,"line_start":243,"line_end":243,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197852,"byte_end":197855,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197860,"byte_end":197916,"line_start":245,"line_end":245,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197921,"byte_end":197924,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197929,"byte_end":197999,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198004,"byte_end":198078,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198083,"byte_end":198150,"line_start":249,"line_end":249,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198155,"byte_end":198224,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198229,"byte_end":198292,"line_start":251,"line_end":251,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198297,"byte_end":198300,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ For slices, prefer [`SliceRandom::choose`] which guarantees `O(1)`","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198305,"byte_end":198375,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"/ performance.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198380,"byte_end":198396,"line_start":254,"line_end":254,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200528,"byte_end":200548,"line_start":317,"line_end":317,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"fn <R> (mut self, rng: &mut R, buf: &mut [Self::Item]) -> usize","parent":{"krate":0,"index":587},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199841,"byte_end":199911,"line_start":304,"line_end":304,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199916,"byte_end":199948,"line_start":305,"line_end":305,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199953,"byte_end":199956,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199961,"byte_end":200034,"line_start":307,"line_end":307,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200039,"byte_end":200111,"line_start":308,"line_end":308,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200116,"byte_end":200148,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200153,"byte_end":200156,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200161,"byte_end":200239,"line_start":311,"line_end":311,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200244,"byte_end":200322,"line_start":312,"line_end":312,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200327,"byte_end":200381,"line_start":313,"line_end":313,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200386,"byte_end":200389,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200394,"byte_end":200459,"line_start":315,"line_end":315,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200464,"byte_end":200520,"line_start":316,"line_end":316,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201960,"byte_end":201975,"line_start":356,"line_end":356,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"fn <R> (mut self, rng: &mut R, amount: usize) -> Vec<Self::Item>","parent":{"krate":0,"index":587},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"/ Collects `amount` values at random from the iterator into a vector.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201231,"byte_end":201302,"line_start":341,"line_end":341,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201307,"byte_end":201310,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `choose_multiple_fill` except for the result type.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201315,"byte_end":201391,"line_start":343,"line_end":343,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201396,"byte_end":201399,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201404,"byte_end":201477,"line_start":345,"line_end":345,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201482,"byte_end":201554,"line_start":346,"line_end":346,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201559,"byte_end":201591,"line_start":347,"line_end":347,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201596,"byte_end":201599,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ The length of the returned vector equals `amount` unless the iterator","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201604,"byte_end":201677,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"/ contains insufficient elements, in which case it equals the number of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201682,"byte_end":201755,"line_start":350,"line_end":350,"column_start":5,"column_end":78}},{"value":"/ elements available.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201760,"byte_end":201783,"line_start":351,"line_end":351,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201788,"byte_end":201791,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201796,"byte_end":201861,"line_start":353,"line_end":353,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201866,"byte_end":201922,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201927,"byte_end":201952,"line_start":355,"line_end":355,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206282,"byte_end":206297,"line_start":491,"line_end":491,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844}],"decl_id":null,"docs":" An iterator over multiple slice elements.","sig":null,"attributes":[{"value":"/ An iterator over multiple slice elements.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206061,"byte_end":206106,"line_start":485,"line_end":485,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206107,"byte_end":206110,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ This struct is created by","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206111,"byte_end":206140,"line_start":487,"line_end":487,"column_start":1,"column_end":30}},{"value":"/ [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206141,"byte_end":206227,"line_start":488,"line_end":488,"column_start":1,"column_end":87}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206228,"byte_end":206253,"line_start":489,"line_end":489,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4278,"byte_end":4284,"line_start":154,"line_end":154,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"/ Generates a random value using the thread-local random number generator.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3195,"byte_end":3271,"line_start":110,"line_end":110,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3272,"byte_end":3275,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ This is simply a shortcut for `thread_rng().gen()`. See [`thread_rng`] for","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3276,"byte_end":3354,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/ documentation of the entropy source and [`Standard`] for documentation of","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3355,"byte_end":3432,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/ distributions and type-specific generation.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3433,"byte_end":3480,"line_start":114,"line_end":114,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3481,"byte_end":3484,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3485,"byte_end":3499,"line_start":116,"line_end":116,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3500,"byte_end":3503,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3504,"byte_end":3511,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ let x = rand::random::<u8>();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3512,"byte_end":3545,"line_start":119,"line_end":119,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3546,"byte_end":3568,"line_start":120,"line_end":120,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3569,"byte_end":3572,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ let y = rand::random::<f64>();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3573,"byte_end":3607,"line_start":122,"line_end":122,"column_start":1,"column_end":35}},{"value":"/ println!(\"{}\", y);","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3608,"byte_end":3630,"line_start":123,"line_end":123,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3631,"byte_end":3634,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3635,"byte_end":3681,"line_start":125,"line_end":125,"column_start":1,"column_end":47}},{"value":"/     println!(\"Better lucky than good!\");","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3682,"byte_end":3726,"line_start":126,"line_end":126,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3727,"byte_end":3732,"line_start":127,"line_end":127,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3733,"byte_end":3740,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3741,"byte_end":3744,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ If you're calling `random()` in a loop, caching the generator as in the","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3745,"byte_end":3820,"line_start":130,"line_end":130,"column_start":1,"column_end":76}},{"value":"/ following example can increase performance.","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3821,"byte_end":3868,"line_start":131,"line_end":131,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3869,"byte_end":3872,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3873,"byte_end":3880,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3881,"byte_end":3899,"line_start":134,"line_end":134,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3900,"byte_end":3903,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3904,"byte_end":3934,"line_start":136,"line_end":136,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3935,"byte_end":3938,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3939,"byte_end":3966,"line_start":138,"line_end":138,"column_start":1,"column_end":28}},{"value":"/     *x = rand::random()","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3967,"byte_end":3994,"line_start":139,"line_end":139,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3995,"byte_end":4000,"line_start":140,"line_end":140,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4001,"byte_end":4004,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ // can be made faster by caching thread_rng","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4005,"byte_end":4052,"line_start":142,"line_end":142,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4053,"byte_end":4056,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4057,"byte_end":4094,"line_start":144,"line_end":144,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4095,"byte_end":4098,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4099,"byte_end":4126,"line_start":146,"line_end":146,"column_start":1,"column_end":28}},{"value":"/     *x = rng.gen();","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4127,"byte_end":4150,"line_start":147,"line_end":147,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4151,"byte_end":4156,"line_start":148,"line_end":148,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4157,"byte_end":4164,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4165,"byte_end":4168,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4169,"byte_end":4210,"line_start":151,"line_end":151,"column_start":1,"column_end":42}},{"value":"cfg(all (feature = \"std\", feature = \"std_rng\"))","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4211,"byte_end":4260,"line_start":152,"line_end":152,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4261,"byte_end":4270,"line_start":153,"line_end":153,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21071,"byte_end":21085,"line_start":72,"line_end":72,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21356,"byte_end":21370,"line_start":81,"line_end":81,"column_start":30,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21380,"byte_end":21389,"line_start":83,"line_end":83,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23270,"byte_end":23279,"line_start":128,"line_end":128,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31947,"byte_end":31954,"line_start":164,"line_end":164,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32720,"byte_end":32727,"line_start":186,"line_end":186,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35923,"byte_end":35930,"line_start":270,"line_end":270,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36100,"byte_end":36107,"line_start":276,"line_end":276,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36680,"byte_end":36688,"line_start":293,"line_end":293,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59366,"byte_end":59374,"line_start":861,"line_end":861,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59440,"byte_end":59455,"line_start":865,"line_end":865,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":79099,"byte_end":79112,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83036,"byte_end":83049,"line_start":82,"line_end":82,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":87787,"byte_end":87800,"line_start":216,"line_end":216,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93632,"byte_end":93645,"line_start":393,"line_end":393,"column_start":30,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93672,"byte_end":93685,"line_start":395,"line_end":395,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":107380,"byte_end":107388,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":107529,"byte_end":107537,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":107680,"byte_end":107688,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":107824,"byte_end":107832,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":108007,"byte_end":108015,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":108310,"byte_end":108318,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116698,"byte_end":116706,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":117455,"byte_end":117467,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":118246,"byte_end":118254,"line_start":82,"line_end":82,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119435,"byte_end":119443,"line_start":117,"line_end":117,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":120737,"byte_end":120745,"line_start":159,"line_end":159,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":121089,"byte_end":121097,"line_start":173,"line_end":173,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13467,"byte_end":13475,"line_start":209,"line_end":209,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14043,"byte_end":14051,"line_start":229,"line_end":229,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149260,"byte_end":149261,"line_start":292,"line_end":292,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":165032,"byte_end":165039,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":165193,"byte_end":165200,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":166064,"byte_end":166073,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":166214,"byte_end":166223,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171120,"byte_end":171132,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171959,"byte_end":171971,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":172510,"byte_end":172522,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":172849,"byte_end":172861,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173151,"byte_end":173164,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174007,"byte_end":174020,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176596,"byte_end":176609,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":177048,"byte_end":177061,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180880,"byte_end":180887,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":181183,"byte_end":181190,"line_start":44,"line_end":44,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":183259,"byte_end":183265,"line_start":38,"line_end":38,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":183721,"byte_end":183727,"line_start":60,"line_end":60,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":184036,"byte_end":184042,"line_start":74,"line_end":74,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188571,"byte_end":188580,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188678,"byte_end":188687,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":189184,"byte_end":189193,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222404,"byte_end":222412,"line_start":36,"line_end":36,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":224156,"byte_end":224164,"line_start":95,"line_end":95,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":224754,"byte_end":224762,"line_start":111,"line_end":111,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":224874,"byte_end":224882,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225183,"byte_end":225195,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225730,"byte_end":225742,"line_start":155,"line_end":155,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225966,"byte_end":225982,"line_start":166,"line_end":166,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226507,"byte_end":226523,"line_start":188,"line_end":188,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206028,"byte_end":206029,"line_start":482,"line_end":482,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206530,"byte_end":206545,"line_start":498,"line_end":498,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206997,"byte_end":207012,"line_start":513,"line_end":513,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2887,"byte_end":2900,"line_start":96,"line_end":96,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":13}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9944,"byte_end":9951,"line_start":108,"line_end":108,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":44}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10093,"byte_end":10101,"line_start":111,"line_end":111,"column_start":35,"column_end":43},"ref_id":{"krate":0,"index":113}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2910,"byte_end":2917,"line_start":97,"line_end":97,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":289}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2936,"byte_end":2940,"line_start":99,"line_end":99,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":351}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162400,"byte_end":162407,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":352}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162418,"byte_end":162422,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":433}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2950,"byte_end":2953,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":489}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":190393,"byte_end":190398,"line_start":28,"line_end":28,"column_start":35,"column_end":40},"ref_id":{"krate":0,"index":490}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21071,"byte_end":21085,"line_start":72,"line_end":72,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":658},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21356,"byte_end":21370,"line_start":81,"line_end":81,"column_start":30,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":658},"to":{"krate":1,"index":1620}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21380,"byte_end":21389,"line_start":83,"line_end":83,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":651},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23270,"byte_end":23279,"line_start":128,"line_end":128,"column_start":29,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":651},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31947,"byte_end":31954,"line_start":164,"line_end":164,"column_start":24,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32720,"byte_end":32727,"line_start":186,"line_end":186,"column_start":44,"column_end":51},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":672},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33143,"byte_end":33148,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":66}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33723,"byte_end":33728,"line_start":214,"line_end":214,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":68}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35923,"byte_end":35930,"line_start":270,"line_end":270,"column_start":56,"column_end":63},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":672},"to":{"krate":2,"index":1776}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36100,"byte_end":36107,"line_start":276,"line_end":276,"column_start":65,"column_end":72},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":672},"to":{"krate":2,"index":1776}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36680,"byte_end":36688,"line_start":293,"line_end":293,"column_start":43,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":92},"to":{"krate":0,"index":88}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59366,"byte_end":59374,"line_start":861,"line_end":861,"column_start":24,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":2,"index":31400},"to":{"krate":0,"index":66}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59440,"byte_end":59455,"line_start":865,"line_end":865,"column_start":25,"column_end":40},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":933},"to":{"krate":0,"index":68}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":79099,"byte_end":79112,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83036,"byte_end":83049,"line_start":82,"line_end":82,"column_start":37,"column_end":50},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":87787,"byte_end":87800,"line_start":216,"line_end":216,"column_start":33,"column_end":46},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":976},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93632,"byte_end":93645,"line_start":393,"line_end":393,"column_start":30,"column_end":43},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":987},"to":{"krate":1,"index":1620}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":93672,"byte_end":93685,"line_start":395,"line_end":395,"column_start":23,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":987},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":107380,"byte_end":107388,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":107529,"byte_end":107537,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":107680,"byte_end":107688,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":107824,"byte_end":107832,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":108007,"byte_end":108015,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":108310,"byte_end":108318,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":116698,"byte_end":116706,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":117455,"byte_end":117467,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1083},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":118246,"byte_end":118254,"line_start":82,"line_end":82,"column_start":29,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119435,"byte_end":119443,"line_start":117,"line_end":117,"column_start":27,"column_end":35},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":120737,"byte_end":120745,"line_start":159,"line_end":159,"column_start":37,"column_end":45},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":121089,"byte_end":121097,"line_start":173,"line_end":173,"column_start":39,"column_end":47},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":132890,"byte_end":132895,"line_start":244,"line_end":244,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":248}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":133101,"byte_end":133106,"line_start":251,"line_end":251,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":252}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":133551,"byte_end":133556,"line_start":272,"line_end":272,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":257}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13467,"byte_end":13475,"line_start":209,"line_end":209,"column_start":28,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1450},"to":{"krate":2,"index":4723}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14043,"byte_end":14051,"line_start":229,"line_end":229,"column_start":39,"column_end":47},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1450},"to":{"krate":2,"index":4983}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":141768,"byte_end":141775,"line_start":55,"line_end":55,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":14,"index":138},"to":{"krate":0,"index":320}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149260,"byte_end":149261,"line_start":292,"line_end":292,"column_start":35,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":341},"to":{"krate":0,"index":320}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":165032,"byte_end":165039,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":165193,"byte_end":165200,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1747},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":166064,"byte_end":166073,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1753},"to":{"krate":2,"index":5928}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":166214,"byte_end":166223,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1753},"to":{"krate":1,"index":1620}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171120,"byte_end":171132,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":171959,"byte_end":171971,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1758},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":172510,"byte_end":172522,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1758},"to":{"krate":2,"index":1562}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":172849,"byte_end":172861,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1758},"to":{"krate":14,"index":143}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173151,"byte_end":173164,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1767},"to":{"krate":14,"index":18}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174007,"byte_end":174020,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176596,"byte_end":176609,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1767},"to":{"krate":2,"index":1562}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":177048,"byte_end":177061,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1767},"to":{"krate":14,"index":143}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":180880,"byte_end":180887,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":181183,"byte_end":181190,"line_start":44,"line_end":44,"column_start":18,"column_end":25},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1779},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":183259,"byte_end":183265,"line_start":38,"line_end":38,"column_start":18,"column_end":24},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1786},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":183721,"byte_end":183727,"line_start":60,"line_end":60,"column_start":22,"column_end":28},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1786},"to":{"krate":14,"index":144}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":184036,"byte_end":184042,"line_start":74,"line_end":74,"column_start":20,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1786},"to":{"krate":14,"index":143}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188571,"byte_end":188580,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1793},"to":{"krate":2,"index":1843}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":188678,"byte_end":188687,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1793},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":189184,"byte_end":189193,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1793},"to":{"krate":14,"index":143}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":222404,"byte_end":222412,"line_start":36,"line_end":36,"column_start":6,"column_end":14},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":224156,"byte_end":224164,"line_start":95,"line_end":95,"column_start":20,"column_end":28},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1805},"to":{"krate":2,"index":1588}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":224754,"byte_end":224762,"line_start":111,"line_end":111,"column_start":25,"column_end":33},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1805},"to":{"krate":2,"index":1776}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":224874,"byte_end":224882,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1805},"to":{"krate":2,"index":1776}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225183,"byte_end":225195,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1816},"to":{"krate":2,"index":4723}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225730,"byte_end":225742,"line_start":155,"line_end":155,"column_start":32,"column_end":44},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1816},"to":{"krate":2,"index":4679}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":225966,"byte_end":225982,"line_start":166,"line_end":166,"column_start":19,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1827},"to":{"krate":2,"index":4723}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":226507,"byte_end":226523,"line_start":188,"line_end":188,"column_start":28,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1827},"to":{"krate":2,"index":4679}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231589,"byte_end":231593,"line_start":316,"line_end":316,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1862},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231596,"byte_end":231606,"line_start":316,"line_end":316,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231609,"byte_end":231612,"line_start":316,"line_end":316,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1614},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231615,"byte_end":231624,"line_start":316,"line_end":316,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1588},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231627,"byte_end":231629,"line_start":316,"line_end":316,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231632,"byte_end":231645,"line_start":316,"line_end":316,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":66},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231660,"byte_end":231664,"line_start":316,"line_end":316,"column_start":84,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":6114},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197773,"byte_end":197781,"line_start":242,"line_end":242,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":4723},"to":{"krate":0,"index":587}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197784,"byte_end":197789,"line_start":242,"line_end":242,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1857},"to":{"krate":0,"index":587}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206028,"byte_end":206029,"line_start":482,"line_end":482,"column_start":28,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":626},"to":{"krate":0,"index":587}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206530,"byte_end":206545,"line_start":498,"line_end":498,"column_start":73,"column_end":88},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1838},"to":{"krate":2,"index":4723}},{"span":{"file_name":"C:\\Users\\Shogg\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206997,"byte_end":207012,"line_start":513,"line_end":513,"column_start":9,"column_end":24},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1838},"to":{"krate":2,"index":4679}}]}